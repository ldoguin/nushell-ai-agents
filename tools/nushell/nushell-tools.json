[
  {
    "type": "function",
    "function": {
      "name": "alias",
      "description": "Alias a command (with optional flags) to a new name.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the alias."
          },
          "initial_value": {
            "type": "\"=\" expression",
            "description": "Equals sign followed by value."
          }
        },
        "required": [
          "name",
          "initial_value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "all",
      "description": "Test if every element of the input fulfills a predicate expression.",
      "parameters": {
        "type": "object",
        "properties": {
          "predicate": {
            "type": "closure(any, int)",
            "description": "A closure that must evaluate to a boolean."
          }
        },
        "required": [
          "predicate"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ansi",
      "description": "Output ANSI codes to change color and style of text.",
      "parameters": {
        "type": "object",
        "properties": {
          "code": {
            "type": "any",
            "description": "The name of the code to use (from `ansi -l`)."
          },
          "--escape": {
            "type": "switch",
            "description": "escape sequence without the escape character(s) ('\\x1b[' is not required)"
          },
          "--osc": {
            "type": "switch",
            "description": "operating system command (osc) escape sequence without the escape character(s) ('\\x1b]' is not required)"
          },
          "--list": {
            "type": "switch",
            "description": "list available ansi code names"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ansi gradient",
      "description": "Add a color gradient (using ANSI color codes) to the given string.",
      "parameters": {
        "type": "object",
        "properties": {
          "...cell path": {
            "type": "cell-path",
            "description": "for a data structure input, add a gradient to strings at the given cell paths"
          },
          "--fgstart": {
            "type": "string",
            "description": "foreground gradient start color in hex (0x123456)"
          },
          "--fgend": {
            "type": "string",
            "description": "foreground gradient end color in hex"
          },
          "--bgstart": {
            "type": "string",
            "description": "background gradient start color in hex"
          },
          "--bgend": {
            "type": "string",
            "description": "background gradient end color in hex"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ansi link",
      "description": "Add a link (using OSC 8 escape sequence) to the given string.",
      "parameters": {
        "type": "object",
        "properties": {
          "...cell path": {
            "type": "cell-path",
            "description": "For a data structure input, add links to all strings at the given cell paths."
          },
          "--text": {
            "type": "string",
            "description": "Link text. Uses uri as text if absent. In case of\n                tables, records and lists applies this text to all elements"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ansi strip",
      "description": "Strip ANSI escape sequences from a string.",
      "parameters": {
        "type": "object",
        "properties": {
          "...cell path": {
            "type": "cell-path",
            "description": "For a data structure input, remove ANSI sequences from strings at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "any",
      "description": "Tests if any element of the input fulfills a predicate expression.",
      "parameters": {
        "type": "object",
        "properties": {
          "predicate": {
            "type": "closure(any, int)",
            "description": "A closure that must evaluate to a boolean."
          }
        },
        "required": [
          "predicate"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "append",
      "description": "Append any number of rows to a table.",
      "parameters": {
        "type": "object",
        "properties": {
          "row": {
            "type": "any",
            "description": "The row, list, or table to append."
          }
        },
        "required": [
          "row"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ast",
      "description": "Print the abstract syntax tree (ast) for a pipeline.",
      "parameters": {
        "type": "object",
        "properties": {
          "pipeline": {
            "type": "string",
            "description": "The pipeline to print the ast for."
          },
          "--json": {
            "type": "switch",
            "description": "serialize to json"
          },
          "--minify": {
            "type": "switch",
            "description": "minify the nuon or json output"
          }
        },
        "required": [
          "pipeline"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits",
      "description": "Various commands for working with bits.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits and",
      "description": "Performs bitwise and for ints or binary values.",
      "parameters": {
        "type": "object",
        "properties": {
          "target": {
            "type": "one_of(binary, int)",
            "description": "right-hand side of the operation"
          },
          "--endian": {
            "type": "string",
            "description": "byte encode endian, available options: native(default), little, big"
          }
        },
        "required": [
          "target"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits not",
      "description": "Performs logical negation on each bit.",
      "parameters": {
        "type": "object",
        "properties": {
          "--signed": {
            "type": "switch",
            "description": "always treat input number as a signed number"
          },
          "--number-bytes": {
            "type": "int",
            "description": "the size of unsigned number in bytes, it can be 1, 2, 4, 8, auto"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits or",
      "description": "Performs bitwise or for ints or binary values.",
      "parameters": {
        "type": "object",
        "properties": {
          "target": {
            "type": "one_of(binary, int)",
            "description": "right-hand side of the operation"
          },
          "--endian": {
            "type": "string",
            "description": "byte encode endian, available options: native(default), little, big"
          }
        },
        "required": [
          "target"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits rol",
      "description": "Bitwise rotate left for ints or binary values.",
      "parameters": {
        "type": "object",
        "properties": {
          "bits": {
            "type": "int",
            "description": "number of bits to rotate left"
          },
          "--signed": {
            "type": "switch",
            "description": "always treat input number as a signed number"
          },
          "--number-bytes": {
            "type": "int",
            "description": "the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`"
          }
        },
        "required": [
          "bits"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits ror",
      "description": "Bitwise rotate right for ints or binary values.",
      "parameters": {
        "type": "object",
        "properties": {
          "bits": {
            "type": "int",
            "description": "number of bits to rotate right"
          },
          "--signed": {
            "type": "switch",
            "description": "always treat input number as a signed number"
          },
          "--number-bytes": {
            "type": "int",
            "description": "the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`"
          }
        },
        "required": [
          "bits"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits shl",
      "description": "Bitwise shift left for ints or binary values.",
      "parameters": {
        "type": "object",
        "properties": {
          "bits": {
            "type": "int",
            "description": "number of bits to shift left"
          },
          "--signed": {
            "type": "switch",
            "description": "always treat input number as a signed number"
          },
          "--number-bytes": {
            "type": "int",
            "description": "the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`"
          }
        },
        "required": [
          "bits"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits shr",
      "description": "Bitwise shift right for ints or binary values.",
      "parameters": {
        "type": "object",
        "properties": {
          "bits": {
            "type": "int",
            "description": "number of bits to shift right"
          },
          "--signed": {
            "type": "switch",
            "description": "always treat input number as a signed number"
          },
          "--number-bytes": {
            "type": "int",
            "description": "the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`"
          }
        },
        "required": [
          "bits"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bits xor",
      "description": "Performs bitwise xor for ints or binary values.",
      "parameters": {
        "type": "object",
        "properties": {
          "target": {
            "type": "one_of(binary, int)",
            "description": "right-hand side of the operation"
          },
          "--endian": {
            "type": "string",
            "description": "byte encode endian, available options: native(default), little, big"
          }
        },
        "required": [
          "target"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "break",
      "description": "Break a loop.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes",
      "description": "Various commands for working with byte data.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes add",
      "description": "Add specified bytes to the input.",
      "parameters": {
        "type": "object",
        "properties": {
          "data": {
            "type": "binary",
            "description": "The binary to add."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, add bytes to the data at the given cell paths."
          },
          "--index": {
            "type": "int",
            "description": "index to insert binary data"
          },
          "--end": {
            "type": "switch",
            "description": "add to the end of binary"
          }
        },
        "required": [
          "data"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes at",
      "description": "Get bytes defined by a range.",
      "parameters": {
        "type": "object",
        "properties": {
          "range": {
            "type": "range",
            "description": "The range to get bytes."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, get bytes from data at the given cell paths."
          }
        },
        "required": [
          "range"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes build",
      "description": "Create bytes from the arguments.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "any",
            "description": "List of bytes."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes collect",
      "description": "Concatenate multiple binary into a single binary, with an optional separator between each.",
      "parameters": {
        "type": "object",
        "properties": {
          "separator": {
            "type": "binary",
            "description": "Optional separator to use when creating binary."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes ends-with",
      "description": "Check if bytes ends with a pattern.",
      "parameters": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "binary",
            "description": "The pattern to match."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, check if bytes at the given cell paths end with the pattern."
          }
        },
        "required": [
          "pattern"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes index-of",
      "description": "Returns start index of first occurrence of pattern in bytes, or -1 if no match.",
      "parameters": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "binary",
            "description": "The pattern to find index of."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, find the indexes at the given cell paths."
          },
          "--all": {
            "type": "switch",
            "description": "returns all matched index"
          },
          "--end": {
            "type": "switch",
            "description": "search from the end of the binary"
          }
        },
        "required": [
          "pattern"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes length",
      "description": "Output the length of any bytes in the pipeline.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, find the length of data at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes remove",
      "description": "Remove bytes.",
      "parameters": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "binary",
            "description": "The pattern to find."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, remove bytes from data at the given cell paths."
          },
          "--end": {
            "type": "switch",
            "description": "remove from end of binary"
          },
          "--all": {
            "type": "switch",
            "description": "remove occurrences of finding binary"
          }
        },
        "required": [
          "pattern"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes replace",
      "description": "Find and replace binary.",
      "parameters": {
        "type": "object",
        "properties": {
          "find": {
            "type": "binary",
            "description": "The pattern to find."
          },
          "replace": {
            "type": "binary",
            "description": "The replacement pattern."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, replace bytes in data at the given cell paths."
          },
          "--all": {
            "type": "switch",
            "description": "replace all occurrences of find binary"
          }
        },
        "required": [
          "find",
          "replace"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes reverse",
      "description": "Reverse the bytes in the pipeline.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, reverse data at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "bytes starts-with",
      "description": "Check if bytes starts with a pattern.",
      "parameters": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "binary",
            "description": "The pattern to match."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, check if bytes at the given cell paths start with the pattern."
          }
        },
        "required": [
          "pattern"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "cal",
      "description": "Display a calendar.",
      "parameters": {
        "type": "object",
        "properties": {
          "--year": {
            "type": "switch",
            "description": "Display the year column"
          },
          "--quarter": {
            "type": "switch",
            "description": "Display the quarter column"
          },
          "--month": {
            "type": "switch",
            "description": "Display the month column"
          },
          "--as-table": {
            "type": "switch",
            "description": "output as a table"
          },
          "--full-year": {
            "type": "int",
            "description": "Display a year-long calendar for the specified year"
          },
          "--week-start": {
            "type": "string",
            "description": "Display the calendar with the specified day as the first day of the week"
          },
          "--month-names": {
            "type": "switch",
            "description": "Display the month names instead of integers"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "cd",
      "description": "Change directory.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "directory",
            "description": "The path to change to."
          },
          "--physical": {
            "type": "switch",
            "description": "use the physical directory structure; resolve symbolic links before processing instances of .."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "char",
      "description": "Output special characters (e.g., 'newline').",
      "parameters": {
        "type": "object",
        "properties": {
          "character": {
            "type": "any",
            "description": "The name of the character to output."
          },
          "...rest": {
            "type": "any",
            "description": "Multiple Unicode bytes."
          },
          "--list": {
            "type": "switch",
            "description": "List all supported character names"
          },
          "--unicode": {
            "type": "switch",
            "description": "Unicode string i.e. 1f378"
          },
          "--integer": {
            "type": "switch",
            "description": "Create a codepoint from an integer"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "chunks",
      "description": "Divide a list or table into chunks of `chunk_size`.",
      "parameters": {
        "type": "object",
        "properties": {
          "chunk_size": {
            "type": "int",
            "description": "The size of each chunk."
          }
        },
        "required": [
          "chunk_size"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "clear",
      "description": "Clear the terminal.",
      "parameters": {
        "type": "object",
        "properties": {
          "--keep-scrollback": {
            "type": "switch",
            "description": "Do not clear the scrollback history"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "collect",
      "description": "Collect a stream into a value.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any)",
            "description": "The closure to run once the stream is collected."
          },
          "--keep-env": {
            "type": "switch",
            "description": "let the closure affect environment variables"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "columns",
      "description": "Given a record or table, produce a list of its columns' names.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "commandline",
      "description": "View the current command line input buffer.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "commandline edit",
      "description": "Modify the current command line input buffer.",
      "parameters": {
        "type": "object",
        "properties": {
          "str": {
            "type": "string",
            "description": "the string to perform the operation with"
          },
          "--append": {
            "type": "switch",
            "description": "appends the string to the end of the buffer"
          },
          "--insert": {
            "type": "switch",
            "description": "inserts the string into the buffer at the cursor position"
          },
          "--replace": {
            "type": "switch",
            "description": "replaces the current contents of the buffer (default)"
          }
        },
        "required": [
          "str"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "commandline get-cursor",
      "description": "Get the current cursor position.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "commandline set-cursor",
      "description": "Set the current cursor position.",
      "parameters": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "int",
            "description": "Cursor position to be set"
          },
          "--end": {
            "type": "switch",
            "description": "set the current cursor position to the end of the buffer"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "compact",
      "description": "Creates a table with non-empty rows.",
      "parameters": {
        "type": "object",
        "properties": {
          "...columns": {
            "type": "any",
            "description": "The columns to compact from the table."
          },
          "--empty": {
            "type": "switch",
            "description": "also compact empty items like \"\", {}, and []"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "complete",
      "description": "Capture the outputs and exit code from an external piped in command in a nushell table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "config",
      "description": "Edit nushell configuration files.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "config env",
      "description": "Edit nu environment configurations.",
      "parameters": {
        "type": "object",
        "properties": {
          "--default": {
            "type": "switch",
            "description": "Print default `env.nu` file instead."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "config nu",
      "description": "Edit nu configurations.",
      "parameters": {
        "type": "object",
        "properties": {
          "--default": {
            "type": "switch",
            "description": "Print default `config.nu` file instead."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "config reset",
      "description": "Reset nushell environment configurations to default, and saves old config files in the config location as oldconfig.nu and oldenv.nu.",
      "parameters": {
        "type": "object",
        "properties": {
          "--nu": {
            "type": "switch",
            "description": "reset only nu config, config.nu"
          },
          "--env": {
            "type": "switch",
            "description": "reset only env config, env.nu"
          },
          "--without-backup": {
            "type": "switch",
            "description": "do not make a backup"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "const",
      "description": "Create a parse-time constant.",
      "parameters": {
        "type": "object",
        "properties": {
          "const_name": {
            "type": "vardecl",
            "description": "Constant name."
          },
          "initial_value": {
            "type": "\"=\" variable",
            "description": "Equals sign followed by constant value."
          }
        },
        "required": [
          "const_name",
          "initial_value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "continue",
      "description": "Continue a loop from the next iteration.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "cp",
      "description": "Copy files using uutils/coreutils cp.",
      "parameters": {
        "type": "object",
        "properties": {
          "...paths": {
            "type": "one_of(glob, string)",
            "description": "Copy SRC file/s to DEST."
          },
          "--recursive": {
            "type": "switch",
            "description": "copy directories recursively"
          },
          "--verbose": {
            "type": "switch",
            "description": "explicitly state what is being done"
          },
          "--force": {
            "type": "switch",
            "description": "if an existing destination file cannot be opened, remove it and try\n                    again (this option is ignored when the -n option is also used).\n                    currently not implemented for windows"
          },
          "--interactive": {
            "type": "switch",
            "description": "ask before overwriting files"
          },
          "--update": {
            "type": "switch",
            "description": "copy only when the SOURCE file is newer than the destination file or when the destination file is missing"
          },
          "--progress": {
            "type": "switch",
            "description": "display a progress bar"
          },
          "--no-clobber": {
            "type": "switch",
            "description": "do not overwrite an existing file"
          },
          "--preserve": {
            "type": "list<string>",
            "description": "preserve only the specified attributes (empty list means no attributes preserved)\n                    if not specified only mode is preserved\n                    possible values: mode, ownership (unix only), timestamps, context, link, links, xattr"
          },
          "--debug": {
            "type": "switch",
            "description": "explain how a file is copied. Implies -v"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "create_left_prompt",
      "description": "",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "create_right_prompt",
      "description": "",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date",
      "description": "Date-related commands.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date format",
      "description": "Removed command: use `format date` instead.",
      "parameters": {
        "type": "object",
        "properties": {
          "format string": {
            "type": "string",
            "description": "The desired date format."
          },
          "--list": {
            "type": "switch",
            "description": "lists strftime cheatsheet"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date humanize",
      "description": "Print a 'humanized' format for the date, relative to now.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date list-timezone",
      "description": "List supported time zones.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date now",
      "description": "Get the current date.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date to-record",
      "description": "Convert the date into a record.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date to-table",
      "description": "Convert the date into a structured table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "date to-timezone",
      "description": "Convert a date to a given time zone.",
      "parameters": {
        "type": "object",
        "properties": {
          "time zone": {
            "type": "string",
            "description": "Time zone description."
          }
        },
        "required": [
          "time zone"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "debug",
      "description": "Debug print the value(s) piped in.",
      "parameters": {
        "type": "object",
        "properties": {
          "--raw": {
            "type": "switch",
            "description": "Prints the raw value representation"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "debug info",
      "description": "View process memory info.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "debug profile",
      "description": "Profile pipeline elements in a closure.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure()",
            "description": "The closure to profile."
          },
          "--spans": {
            "type": "switch",
            "description": "Collect spans of profiled elements"
          },
          "--expand-source": {
            "type": "switch",
            "description": "Collect full source fragments of profiled elements"
          },
          "--values": {
            "type": "switch",
            "description": "Collect pipeline element output values"
          },
          "--expr": {
            "type": "switch",
            "description": "Collect expression types"
          },
          "--instructions": {
            "type": "switch",
            "description": "Collect IR instructions"
          },
          "--lines": {
            "type": "switch",
            "description": "Collect line numbers"
          },
          "--max-depth": {
            "type": "int",
            "description": "How many blocks/closures deep to step into (default 2)"
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "decode",
      "description": "Decode bytes into a string.",
      "parameters": {
        "type": "object",
        "properties": {
          "encoding": {
            "type": "string",
            "description": "The text encoding to use."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "decode base32",
      "description": "Decode a Base32 value.",
      "parameters": {
        "type": "object",
        "properties": {
          "--nopad": {
            "type": "switch",
            "description": "Do not pad the output."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "decode base32hex",
      "description": "Encode a base32hex value.",
      "parameters": {
        "type": "object",
        "properties": {
          "--nopad": {
            "type": "switch",
            "description": "Reject input with padding."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "decode base64",
      "description": "Base64 decode a value.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, decode data at the given cell paths."
          },
          "--character-set": {
            "type": "string",
            "description": "specify the character rules for encoding the input.\n\tValid values are 'standard', 'standard-no-padding', 'url-safe', 'url-safe-no-padding','binhex', 'bcrypt', 'crypt', 'mutf7'"
          },
          "--binary": {
            "type": "switch",
            "description": "Output a binary value instead of decoding payload as UTF-8"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "decode hex",
      "description": "Hex decode a value.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "decode new-base64",
      "description": "Decode a Base64 value.",
      "parameters": {
        "type": "object",
        "properties": {
          "--url": {
            "type": "switch",
            "description": "Decode the URL-safe Base64 version."
          },
          "--nopad": {
            "type": "switch",
            "description": "Reject padding."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "def",
      "description": "Define a custom command.",
      "parameters": {
        "type": "object",
        "properties": {
          "def_name": {
            "type": "string",
            "description": "Command name."
          },
          "params": {
            "type": "signature",
            "description": "Parameters."
          },
          "block": {
            "type": "closure()",
            "description": "Body of the definition."
          },
          "--env": {
            "type": "switch",
            "description": "keep the environment defined inside the command"
          },
          "--wrapped": {
            "type": "switch",
            "description": "treat unknown flags and arguments as strings (requires ...rest-like parameter in signature)"
          }
        },
        "required": [
          "def_name",
          "params",
          "block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "default",
      "description": "Sets a default value if a row's column is missing or null.",
      "parameters": {
        "type": "object",
        "properties": {
          "default value": {
            "type": "any",
            "description": "The value to use as a default."
          },
          "column name": {
            "type": "string",
            "description": "The name of the column."
          }
        },
        "required": [
          "default value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "describe",
      "description": "Describe the type and structure of the value(s) piped in.",
      "parameters": {
        "type": "object",
        "properties": {
          "--no-collect": {
            "type": "switch",
            "description": "do not collect streams of structured data"
          },
          "--detailed": {
            "type": "switch",
            "description": "show detailed information about the value"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "detect columns",
      "description": "Attempt to automatically split text into multiple columns.",
      "parameters": {
        "type": "object",
        "properties": {
          "--skip": {
            "type": "int",
            "description": "number of rows to skip before detecting"
          },
          "--no-headers": {
            "type": "switch",
            "description": "don't detect headers"
          },
          "--combine-columns": {
            "type": "range",
            "description": "columns to be combined; listed as a range"
          },
          "--guess": {
            "type": "switch",
            "description": "detect columns by guessing width, it may be useful if default one doesn't work"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "drop",
      "description": "Alias for `drop`",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "do",
      "description": "Run a closure, providing it with the pipeline input.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure()",
            "description": "The closure to run."
          },
          "...rest": {
            "type": "any",
            "description": "The parameter(s) for the closure."
          },
          "--ignore-errors": {
            "type": "switch",
            "description": "ignore errors as the closure runs"
          },
          "--ignore-shell-errors": {
            "type": "switch",
            "description": "ignore shell errors as the closure runs"
          },
          "--ignore-program-errors": {
            "type": "switch",
            "description": "ignore external program errors as the closure runs"
          },
          "--capture-errors": {
            "type": "switch",
            "description": "catch errors as the closure runs, and return them"
          },
          "--env": {
            "type": "switch",
            "description": "keep the environment defined inside the command"
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "drop",
      "description": "Remove items/rows from the end of the input list/table. Counterpart of `skip`. Opposite of `last`.",
      "parameters": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "int",
            "description": "The number of items to remove."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "drop column",
      "description": "Remove N columns at the right-hand end of the input table. To remove columns by name, use `reject`.",
      "parameters": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "int",
            "description": "Starting from the end, the number of columns to remove."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "drop nth",
      "description": "Drop the selected rows.",
      "parameters": {
        "type": "object",
        "properties": {
          "row number or row range": {
            "type": "any",
            "description": "The number of the row to drop or a range to drop consecutive rows."
          },
          "...rest": {
            "type": "any",
            "description": "The number of the row to drop."
          }
        },
        "required": [
          "row number or row range"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "du",
      "description": "Find disk usage sizes of specified items.",
      "parameters": {
        "type": "object",
        "properties": {
          "...path": {
            "type": "one_of(glob, string)",
            "description": "Starting directory."
          },
          "--all": {
            "type": "switch",
            "description": "Output file sizes as well as directory sizes"
          },
          "--deref": {
            "type": "switch",
            "description": "Dereference symlinks to their targets for size"
          },
          "--exclude": {
            "type": "glob",
            "description": "Exclude these file names"
          },
          "--max-depth": {
            "type": "int",
            "description": "Directory recursion limit"
          },
          "--min-size": {
            "type": "int",
            "description": "Exclude files below this size"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "each",
      "description": "Run a closure on each row of the input list, creating a new list with the results.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any)",
            "description": "The closure to run."
          },
          "--keep-empty": {
            "type": "switch",
            "description": "keep empty result cells"
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "each while",
      "description": "Run a closure on each row of the input list until a null is found, then create a new list with the results.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any, int)",
            "description": "the closure to run"
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "echo",
      "description": "Returns its arguments, ignoring the piped-in value.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "any",
            "description": "The values to echo."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "encode",
      "description": "Encode a string into bytes.",
      "parameters": {
        "type": "object",
        "properties": {
          "encoding": {
            "type": "string",
            "description": "The text encoding to use."
          },
          "--ignore-errors": {
            "type": "switch",
            "description": "when a character isn't in the given encoding, replace with a HTML entity (like `&#127880;`)"
          }
        },
        "required": [
          "encoding"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "encode base32",
      "description": "Encode a string or binary value using Base32.",
      "parameters": {
        "type": "object",
        "properties": {
          "--nopad": {
            "type": "switch",
            "description": "Don't accept padding."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "encode base32hex",
      "description": "Encode a binary value or a string using base32hex.",
      "parameters": {
        "type": "object",
        "properties": {
          "--nopad": {
            "type": "switch",
            "description": "Don't pad the output."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "encode base64",
      "description": "Encode a string or binary value using Base64.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, encode data at the given cell paths."
          },
          "--character-set": {
            "type": "string",
            "description": "specify the character rules for encoding the input.\n\tValid values are 'standard', 'standard-no-padding', 'url-safe', 'url-safe-no-padding','binhex', 'bcrypt', 'crypt', 'mutf7'"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "encode hex",
      "description": "Hex encode a binary value or a string.",
      "parameters": {
        "type": "object",
        "properties": {
          "--lower": {
            "type": "switch",
            "description": "Encode to lowercase hex."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "encode new-base64",
      "description": "Encode a string or binary value using Base64.",
      "parameters": {
        "type": "object",
        "properties": {
          "--url": {
            "type": "switch",
            "description": "Use the URL-safe Base64 version."
          },
          "--nopad": {
            "type": "switch",
            "description": "Don't pad the output."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "add",
      "description": "Alias for `add`",
      "parameters": {
        "type": "object",
        "properties": {
          "...paths": {
            "type": "string",
            "description": "directory or directories to add to working list"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "enumerate",
      "description": "Enumerate the elements in a stream.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "error make",
      "description": "Create an error.",
      "parameters": {
        "type": "object",
        "properties": {
          "error_struct": {
            "type": "record",
            "description": "The error to create."
          },
          "--unspanned": {
            "type": "switch",
            "description": "remove the origin label from the error"
          }
        },
        "required": [
          "error_struct"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "every",
      "description": "Show (or skip) every n-th row, starting from the first one.",
      "parameters": {
        "type": "object",
        "properties": {
          "stride": {
            "type": "int",
            "description": "How many rows to skip between (and including) each row returned."
          },
          "--skip": {
            "type": "switch",
            "description": "skip the rows that would be returned, instead of selecting them"
          }
        },
        "required": [
          "stride"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "exec",
      "description": "Execute a command, replacing or exiting the current process, depending on platform.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The command to execute."
          }
        },
        "required": [
          "command"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "exit",
      "description": "Exit Nu.",
      "parameters": {
        "type": "object",
        "properties": {
          "exit_code": {
            "type": "int",
            "description": "Exit code to return immediately with."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "explain",
      "description": "Explain closure contents.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any)",
            "description": "The closure to run."
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "explore",
      "description": "Explore acts as a table pager, just like `less` does for text.",
      "parameters": {
        "type": "object",
        "properties": {
          "--head": {
            "type": "bool",
            "description": "Show or hide column headers (default true)"
          },
          "--index": {
            "type": "switch",
            "description": "Show row indexes when viewing a list"
          },
          "--tail": {
            "type": "switch",
            "description": "Start with the viewport scrolled to the bottom"
          },
          "--peek": {
            "type": "switch",
            "description": "When quitting, output the value of the cell the cursor was on"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export",
      "description": "Export definitions or environment variables from a module.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export alias",
      "description": "Alias a command (with optional flags) to a new name and export it from a module.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the alias."
          },
          "initial_value": {
            "type": "\"=\" expression",
            "description": "Equals sign followed by value."
          }
        },
        "required": [
          "name",
          "initial_value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export const",
      "description": "Use parse-time constant from a module and export them from this module.",
      "parameters": {
        "type": "object",
        "properties": {
          "const_name": {
            "type": "vardecl",
            "description": "Constant name."
          },
          "initial_value": {
            "type": "\"=\" variable",
            "description": "Equals sign followed by constant value."
          }
        },
        "required": [
          "const_name",
          "initial_value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export def",
      "description": "Define a custom command and export it from a module.",
      "parameters": {
        "type": "object",
        "properties": {
          "def_name": {
            "type": "string",
            "description": "Command name."
          },
          "params": {
            "type": "signature",
            "description": "Parameters."
          },
          "block": {
            "type": "block",
            "description": "Body of the definition."
          },
          "--env": {
            "type": "switch",
            "description": "keep the environment defined inside the command"
          },
          "--wrapped": {
            "type": "switch",
            "description": "treat unknown flags and arguments as strings (requires ...rest-like parameter in signature)"
          }
        },
        "required": [
          "def_name",
          "params",
          "block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export extern",
      "description": "Define an extern and export it from a module.",
      "parameters": {
        "type": "object",
        "properties": {
          "def_name": {
            "type": "string",
            "description": "Definition name."
          },
          "params": {
            "type": "signature",
            "description": "Parameters."
          }
        },
        "required": [
          "def_name",
          "params"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export module",
      "description": "Export a custom module from a module.",
      "parameters": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Module name or module path."
          },
          "block": {
            "type": "block",
            "description": "Body of the module if 'module' parameter is not a path."
          }
        },
        "required": [
          "module"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export use",
      "description": "Use definitions from a module and export them from this module.",
      "parameters": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Module or module file."
          },
          "...members": {
            "type": "any",
            "description": "Which members of the module to import."
          }
        },
        "required": [
          "module"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "export-env",
      "description": "Run a block and preserve its environment in a current scope.",
      "parameters": {
        "type": "object",
        "properties": {
          "block": {
            "type": "block",
            "description": "The block to run to set the environment."
          }
        },
        "required": [
          "block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "extern",
      "description": "Define a signature for an external command.",
      "parameters": {
        "type": "object",
        "properties": {
          "def_name": {
            "type": "string",
            "description": "Definition name."
          },
          "params": {
            "type": "signature",
            "description": "Parameters."
          }
        },
        "required": [
          "def_name",
          "params"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "fill",
      "description": "Fill and Align.",
      "parameters": {
        "type": "object",
        "properties": {
          "--width": {
            "type": "int",
            "description": "The width of the output. Defaults to 1"
          },
          "--alignment": {
            "type": "string",
            "description": "The alignment of the output. Defaults to Left (Left(l), Right(r), Center(c/m), MiddleRight(cr/mr))"
          },
          "--character": {
            "type": "string",
            "description": "The character to fill with. Defaults to ' ' (space)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "filter",
      "description": "Filter values based on a predicate closure.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any, int)",
            "description": "Predicate closure."
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "find",
      "description": "Searches terms in the input.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "any",
            "description": "Terms to search."
          },
          "--regex": {
            "type": "string",
            "description": "regex to match with"
          },
          "--ignore-case": {
            "type": "switch",
            "description": "case-insensitive regex mode; equivalent to (?i)"
          },
          "--multiline": {
            "type": "switch",
            "description": "multi-line regex mode: ^ and $ match begin/end of line; equivalent to (?m)"
          },
          "--dotall": {
            "type": "switch",
            "description": "dotall regex mode: allow a dot . to match newlines \\n; equivalent to (?s)"
          },
          "--columns": {
            "type": "list<string>",
            "description": "column names to be searched (with rest parameter, not regex yet)"
          },
          "--invert": {
            "type": "switch",
            "description": "invert the match"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "first",
      "description": "Return only the first several rows of the input. Counterpart of `last`. Opposite of `skip`.",
      "parameters": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "int",
            "description": "Starting from the front, the number of rows to return."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "flatten",
      "description": "Flatten the table.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "Optionally flatten data by column."
          },
          "--all": {
            "type": "switch",
            "description": "flatten inner table one level out"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "fmt",
      "description": "Format a number.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "for",
      "description": "Loop over a range.",
      "parameters": {
        "type": "object",
        "properties": {
          "var_name": {
            "type": "vardecl",
            "description": "Name of the looping variable."
          },
          "range": {
            "type": "\"in\" any",
            "description": "Range of the loop."
          },
          "block": {
            "type": "block",
            "description": "The block to run."
          }
        },
        "required": [
          "var_name",
          "range",
          "block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "format",
      "description": "Various commands for formatting data.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "format date",
      "description": "Format a given date using a format string.",
      "parameters": {
        "type": "object",
        "properties": {
          "format string": {
            "type": "string",
            "description": "The desired format date."
          },
          "--list": {
            "type": "switch",
            "description": "lists strftime cheatsheet"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "format duration",
      "description": "Outputs duration with a specified unit of time.",
      "parameters": {
        "type": "object",
        "properties": {
          "format value": {
            "type": "string",
            "description": "The unit in which to display the duration."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, format duration at the given cell paths."
          }
        },
        "required": [
          "format value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "format filesize",
      "description": "Converts a column of filesizes to some specified format.",
      "parameters": {
        "type": "object",
        "properties": {
          "format value": {
            "type": "string",
            "description": "The format into which convert the file sizes."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, format filesizes at the given cell paths."
          }
        },
        "required": [
          "format value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "format pattern",
      "description": "Format columns into a string using a simple pattern.",
      "parameters": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "description": "the pattern to output. e.g.) \"{foo}: {bar}\""
          }
        },
        "required": [
          "pattern"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from",
      "description": "Parse a string or binary data into structured data.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from csv",
      "description": "Parse text as .csv and create table.",
      "parameters": {
        "type": "object",
        "properties": {
          "--separator": {
            "type": "string",
            "description": "a character to separate columns (either single char or 4 byte unicode sequence), defaults to ','"
          },
          "--comment": {
            "type": "string",
            "description": "a comment character to ignore lines starting with it"
          },
          "--quote": {
            "type": "string",
            "description": "a quote character to ignore separators in strings, defaults to '\"'"
          },
          "--escape": {
            "type": "string",
            "description": "an escape character for strings containing the quote character"
          },
          "--noheaders": {
            "type": "switch",
            "description": "don't treat the first row as column names"
          },
          "--flexible": {
            "type": "switch",
            "description": "allow the number of fields in records to be variable"
          },
          "--no-infer": {
            "type": "switch",
            "description": "no field type inferencing"
          },
          "--trim": {
            "type": "string",
            "description": "drop leading and trailing whitespaces around headers names and/or field values"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from json",
      "description": "Convert from json to structured data.",
      "parameters": {
        "type": "object",
        "properties": {
          "--objects": {
            "type": "switch",
            "description": "treat each line as a separate value"
          },
          "--strict": {
            "type": "switch",
            "description": "follow the json specification exactly"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from msgpack",
      "description": "Convert MessagePack data into Nu values.",
      "parameters": {
        "type": "object",
        "properties": {
          "--objects": {
            "type": "switch",
            "description": "Read multiple objects from input"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from msgpackz",
      "description": "Convert brotli-compressed MessagePack data into Nu values.",
      "parameters": {
        "type": "object",
        "properties": {
          "--objects": {
            "type": "switch",
            "description": "Read multiple objects from input"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from nuon",
      "description": "Convert from nuon to structured data.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from ods",
      "description": "Parse OpenDocument Spreadsheet(.ods) data and create table.",
      "parameters": {
        "type": "object",
        "properties": {
          "--sheets": {
            "type": "list<string>",
            "description": "Only convert specified sheets"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from png",
      "description": "create ansi text from an image",
      "parameters": {
        "type": "object",
        "properties": {
          "--width": {
            "type": "int",
            "description": "Output width, in characters."
          },
          "--height": {
            "type": "int",
            "description": "Output height, in characters."
          },
          "--log-level": {
            "type": "string",
            "description": "sets log level (CRITICAL (c) ERROR (e) WARN (w) INFO (i) DEBUG (d) TRACE (t)) defaults to INFO"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from ssv",
      "description": "Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2.",
      "parameters": {
        "type": "object",
        "properties": {
          "--noheaders": {
            "type": "switch",
            "description": "don't treat the first row as column names"
          },
          "--aligned-columns": {
            "type": "switch",
            "description": "assume columns are aligned"
          },
          "--minimum-spaces": {
            "type": "int",
            "description": "the minimum spaces to separate columns"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from toml",
      "description": "Parse text as .toml and create record.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from tsv",
      "description": "Parse text as .tsv and create table.",
      "parameters": {
        "type": "object",
        "properties": {
          "--comment": {
            "type": "string",
            "description": "a comment character to ignore lines starting with it"
          },
          "--quote": {
            "type": "string",
            "description": "a quote character to ignore separators in strings, defaults to '\"'"
          },
          "--escape": {
            "type": "string",
            "description": "an escape character for strings containing the quote character"
          },
          "--noheaders": {
            "type": "switch",
            "description": "don't treat the first row as column names"
          },
          "--flexible": {
            "type": "switch",
            "description": "allow the number of fields in records to be variable"
          },
          "--no-infer": {
            "type": "switch",
            "description": "no field type inferencing"
          },
          "--trim": {
            "type": "string",
            "description": "drop leading and trailing whitespaces around headers names and/or field values"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from url",
      "description": "Parse url-encoded string as a record.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from xlsx",
      "description": "Parse binary Excel(.xlsx) data and create table.",
      "parameters": {
        "type": "object",
        "properties": {
          "--sheets": {
            "type": "list<string>",
            "description": "Only convert specified sheets"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from xml",
      "description": "Parse text as .xml and create record.",
      "parameters": {
        "type": "object",
        "properties": {
          "--keep-comments": {
            "type": "switch",
            "description": "add comment nodes to result"
          },
          "--keep-pi": {
            "type": "switch",
            "description": "add processing instruction nodes to result"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from yaml",
      "description": "Parse text as .yaml/.yml and create table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "from yml",
      "description": "Parse text as .yaml/.yml and create table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "goto",
      "description": "Alias for `goto`",
      "parameters": {
        "type": "object",
        "properties": {
          "shell": {
            "type": "int",
            "description": ""
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "generate",
      "description": "Generate a list of values by successively invoking a closure.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any)",
            "description": "Generator function."
          },
          "initial": {
            "type": "any",
            "description": "Initial value."
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "get",
      "description": "Extract data using a cell path.",
      "parameters": {
        "type": "object",
        "properties": {
          "cell_path": {
            "type": "cell-path",
            "description": "The cell path to the data."
          },
          "...rest": {
            "type": "cell-path",
            "description": "Additional cell paths."
          },
          "--ignore-errors": {
            "type": "switch",
            "description": "ignore missing data (make all cell path members optional)"
          },
          "--sensitive": {
            "type": "switch",
            "description": "get path in a case sensitive manner"
          }
        },
        "required": [
          "cell_path"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "glob",
      "description": "Creates a list of files and/or folders based on the glob pattern provided.",
      "parameters": {
        "type": "object",
        "properties": {
          "glob": {
            "type": "one_of(string, glob)",
            "description": "The glob expression."
          },
          "--depth": {
            "type": "int",
            "description": "directory depth to search"
          },
          "--no-dir": {
            "type": "switch",
            "description": "Whether to filter out directories from the returned paths"
          },
          "--no-file": {
            "type": "switch",
            "description": "Whether to filter out files from the returned paths"
          },
          "--no-symlink": {
            "type": "switch",
            "description": "Whether to filter out symlinks from the returned paths"
          },
          "--exclude": {
            "type": "list<string>",
            "description": "Patterns to exclude from the search: `glob` will not walk the inside of directories matching the excluded patterns."
          }
        },
        "required": [
          "glob"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "grid",
      "description": "Renders the output to a textual terminal grid.",
      "parameters": {
        "type": "object",
        "properties": {
          "--width": {
            "type": "int",
            "description": "number of terminal columns wide (not output columns)"
          },
          "--color": {
            "type": "switch",
            "description": "draw output with color"
          },
          "--icons": {
            "type": "switch",
            "description": "draw output with icons (assumes nerd font is used)"
          },
          "--separator": {
            "type": "string",
            "description": "character to separate grid with"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "group",
      "description": "Groups input into groups of `group_size`.",
      "parameters": {
        "type": "object",
        "properties": {
          "group_size": {
            "type": "int",
            "description": "The size of each group."
          }
        },
        "required": [
          "group_size"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "group-by",
      "description": "Splits a list or table into groups, and returns a record containing those groups.",
      "parameters": {
        "type": "object",
        "properties": {
          "grouper": {
            "type": "one_of(cell-path, closure(), closure(any))",
            "description": "The path to the column to group on."
          },
          "--to-table": {
            "type": "switch",
            "description": "Return a table with \"groups\" and \"items\" columns"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "hash",
      "description": "Apply hash function.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "hash md5",
      "description": "Hash a value using the md5 hash algorithm.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "Optionally md5 hash data by cell path."
          },
          "--binary": {
            "type": "switch",
            "description": "Output binary instead of hexadecimal representation"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "hash sha256",
      "description": "Hash a value using the sha256 hash algorithm.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "Optionally sha256 hash data by cell path."
          },
          "--binary": {
            "type": "switch",
            "description": "Output binary instead of hexadecimal representation"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "headers",
      "description": "Use the first row of the table as column names.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "help",
      "description": "Display help information about different parts of Nushell.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "The name of command, alias or module to get help on."
          },
          "--find": {
            "type": "string",
            "description": "string to find in command names, descriptions, and search terms"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "help aliases",
      "description": "Show help on nushell aliases.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "The name of alias to get help on."
          },
          "--find": {
            "type": "string",
            "description": "string to find in alias names and descriptions"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "help commands",
      "description": "Show help on nushell commands.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "The name of command to get help on."
          },
          "--find": {
            "type": "string",
            "description": "string to find in command names, descriptions, and search terms"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "help escapes",
      "description": "Show help on nushell string escapes.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "help externs",
      "description": "Show help on nushell externs.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "The name of extern to get help on."
          },
          "--find": {
            "type": "string",
            "description": "string to find in extern names and descriptions"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "help modules",
      "description": "Show help on nushell modules.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "The name of module to get help on."
          },
          "--find": {
            "type": "string",
            "description": "string to find in module names and descriptions"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "help operators",
      "description": "Show help on nushell operators.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "hide",
      "description": "Hide definitions in the current scope.",
      "parameters": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Module or module file."
          },
          "members": {
            "type": "any",
            "description": "Which members of the module to import."
          }
        },
        "required": [
          "module"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "hide-env",
      "description": "Hide environment variables in the current scope.",
      "parameters": {
        "type": "object",
        "properties": {
          "...name": {
            "type": "string",
            "description": "Environment variable names to hide."
          },
          "--ignore-errors": {
            "type": "switch",
            "description": "do not throw an error if an environment variable was not found"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "histogram",
      "description": "Creates a new table with a histogram based on the column name passed in.",
      "parameters": {
        "type": "object",
        "properties": {
          "column-name": {
            "type": "string",
            "description": "Column name to calc frequency, no need to provide if input is a list."
          },
          "frequency-column-name": {
            "type": "string",
            "description": "Histogram's frequency column, default to be frequency column output."
          },
          "--percentage-type": {
            "type": "string",
            "description": "percentage calculate method, can be 'normalize' or 'relative', in 'normalize', defaults to be 'normalize'"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "history",
      "description": "Get the command history.",
      "parameters": {
        "type": "object",
        "properties": {
          "--clear": {
            "type": "switch",
            "description": "Clears out the history entries"
          },
          "--long": {
            "type": "switch",
            "description": "Show long listing of entries for sqlite history"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "history session",
      "description": "Get the command history session.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http",
      "description": "Various commands for working with http methods.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http delete",
      "description": "Delete the specified resource.",
      "parameters": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "description": "The URL to fetch the contents from."
          },
          "--user": {
            "type": "any",
            "description": "the username when authenticating"
          },
          "--password": {
            "type": "any",
            "description": "the password when authenticating"
          },
          "--data": {
            "type": "any",
            "description": "the content to post"
          },
          "--content-type": {
            "type": "any",
            "description": "the MIME type of content to post"
          },
          "--max-time": {
            "type": "int",
            "description": "timeout period in seconds"
          },
          "--headers": {
            "type": "any",
            "description": "custom headers you want to add "
          },
          "--raw": {
            "type": "switch",
            "description": "fetch contents as text rather than a table"
          },
          "--insecure": {
            "type": "switch",
            "description": "allow insecure server connections when using SSL"
          },
          "--full": {
            "type": "switch",
            "description": "returns the full response instead of only the body"
          },
          "--allow-errors": {
            "type": "switch",
            "description": "do not fail if the server returns an error code"
          },
          "--redirect-mode": {
            "type": "string",
            "description": "What to do when encountering redirects. Default: 'follow'. Valid options: 'follow' ('f'), 'manual' ('m'), 'error' ('e')."
          }
        },
        "required": [
          "URL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http get",
      "description": "Fetch the contents from a URL.",
      "parameters": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "description": "The URL to fetch the contents from."
          },
          "--user": {
            "type": "any",
            "description": "the username when authenticating"
          },
          "--password": {
            "type": "any",
            "description": "the password when authenticating"
          },
          "--max-time": {
            "type": "int",
            "description": "timeout period in seconds"
          },
          "--headers": {
            "type": "any",
            "description": "custom headers you want to add "
          },
          "--raw": {
            "type": "switch",
            "description": "fetch contents as text rather than a table"
          },
          "--insecure": {
            "type": "switch",
            "description": "allow insecure server connections when using SSL"
          },
          "--full": {
            "type": "switch",
            "description": "returns the full response instead of only the body"
          },
          "--allow-errors": {
            "type": "switch",
            "description": "do not fail if the server returns an error code"
          },
          "--redirect-mode": {
            "type": "string",
            "description": "What to do when encountering redirects. Default: 'follow'. Valid options: 'follow' ('f'), 'manual' ('m'), 'error' ('e')."
          }
        },
        "required": [
          "URL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http head",
      "description": "Get the headers from a URL.",
      "parameters": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "description": "The URL to fetch the contents from."
          },
          "--user": {
            "type": "any",
            "description": "the username when authenticating"
          },
          "--password": {
            "type": "any",
            "description": "the password when authenticating"
          },
          "--max-time": {
            "type": "int",
            "description": "timeout period in seconds"
          },
          "--headers": {
            "type": "any",
            "description": "custom headers you want to add "
          },
          "--insecure": {
            "type": "switch",
            "description": "allow insecure server connections when using SSL"
          },
          "--redirect-mode": {
            "type": "string",
            "description": "What to do when encountering redirects. Default: 'follow'. Valid options: 'follow' ('f'), 'manual' ('m'), 'error' ('e')."
          }
        },
        "required": [
          "URL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http options",
      "description": "Requests permitted communication options for a given URL.",
      "parameters": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "description": "The URL to fetch the options from."
          },
          "--user": {
            "type": "any",
            "description": "the username when authenticating"
          },
          "--password": {
            "type": "any",
            "description": "the password when authenticating"
          },
          "--max-time": {
            "type": "int",
            "description": "timeout period in seconds"
          },
          "--headers": {
            "type": "any",
            "description": "custom headers you want to add "
          },
          "--insecure": {
            "type": "switch",
            "description": "allow insecure server connections when using SSL"
          },
          "--allow-errors": {
            "type": "switch",
            "description": "do not fail if the server returns an error code"
          }
        },
        "required": [
          "URL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http patch",
      "description": "Patch a body to a URL.",
      "parameters": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "description": "The URL to post to."
          },
          "data": {
            "type": "any",
            "description": "The contents of the post body."
          },
          "--user": {
            "type": "any",
            "description": "the username when authenticating"
          },
          "--password": {
            "type": "any",
            "description": "the password when authenticating"
          },
          "--content-type": {
            "type": "any",
            "description": "the MIME type of content to post"
          },
          "--max-time": {
            "type": "int",
            "description": "timeout period in seconds"
          },
          "--headers": {
            "type": "any",
            "description": "custom headers you want to add "
          },
          "--raw": {
            "type": "switch",
            "description": "return values as a string instead of a table"
          },
          "--insecure": {
            "type": "switch",
            "description": "allow insecure server connections when using SSL"
          },
          "--full": {
            "type": "switch",
            "description": "returns the full response instead of only the body"
          },
          "--allow-errors": {
            "type": "switch",
            "description": "do not fail if the server returns an error code"
          },
          "--redirect-mode": {
            "type": "string",
            "description": "What to do when encountering redirects. Default: 'follow'. Valid options: 'follow' ('f'), 'manual' ('m'), 'error' ('e')."
          }
        },
        "required": [
          "URL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http post",
      "description": "Post a body to a URL.",
      "parameters": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "description": "The URL to post to."
          },
          "data": {
            "type": "any",
            "description": "The contents of the post body. Required unless part of a pipeline."
          },
          "--user": {
            "type": "any",
            "description": "the username when authenticating"
          },
          "--password": {
            "type": "any",
            "description": "the password when authenticating"
          },
          "--content-type": {
            "type": "any",
            "description": "the MIME type of content to post"
          },
          "--max-time": {
            "type": "int",
            "description": "timeout period in seconds"
          },
          "--headers": {
            "type": "any",
            "description": "custom headers you want to add "
          },
          "--raw": {
            "type": "switch",
            "description": "return values as a string instead of a table"
          },
          "--insecure": {
            "type": "switch",
            "description": "allow insecure server connections when using SSL"
          },
          "--full": {
            "type": "switch",
            "description": "returns the full response instead of only the body"
          },
          "--allow-errors": {
            "type": "switch",
            "description": "do not fail if the server returns an error code"
          },
          "--redirect-mode": {
            "type": "string",
            "description": "What to do when encountering redirects. Default: 'follow'. Valid options: 'follow' ('f'), 'manual' ('m'), 'error' ('e')."
          }
        },
        "required": [
          "URL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "http put",
      "description": "Put a body to a URL.",
      "parameters": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "description": "The URL to post to."
          },
          "data": {
            "type": "any",
            "description": "The contents of the post body. Required unless part of a pipeline."
          },
          "--user": {
            "type": "any",
            "description": "the username when authenticating"
          },
          "--password": {
            "type": "any",
            "description": "the password when authenticating"
          },
          "--content-type": {
            "type": "any",
            "description": "the MIME type of content to post"
          },
          "--max-time": {
            "type": "int",
            "description": "timeout period in seconds"
          },
          "--headers": {
            "type": "any",
            "description": "custom headers you want to add "
          },
          "--raw": {
            "type": "switch",
            "description": "return values as a string instead of a table"
          },
          "--insecure": {
            "type": "switch",
            "description": "allow insecure server connections when using SSL"
          },
          "--full": {
            "type": "switch",
            "description": "returns the full response instead of only the body"
          },
          "--allow-errors": {
            "type": "switch",
            "description": "do not fail if the server returns an error code"
          },
          "--redirect-mode": {
            "type": "string",
            "description": "What to do when encountering redirects. Default: 'follow'. Valid options: 'follow' ('f'), 'manual' ('m'), 'error' ('e')."
          }
        },
        "required": [
          "URL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "if",
      "description": "Conditionally run a block.",
      "parameters": {
        "type": "object",
        "properties": {
          "cond": {
            "type": "variable",
            "description": "Condition to check."
          },
          "then_block": {
            "type": "block",
            "description": "Block to run if check succeeds."
          },
          "else_expression": {
            "type": "\"else\" one_of(block, expression)",
            "description": "Expression or block to run when the condition is false."
          }
        },
        "required": [
          "cond",
          "then_block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ignore",
      "description": "Ignore the output of the previous command in the pipeline.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "input",
      "description": "Get input from the user.",
      "parameters": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Prompt to show the user."
          },
          "--bytes-until-any": {
            "type": "string",
            "description": "read bytes (not text) until any of the given stop bytes is seen"
          },
          "--numchar": {
            "type": "int",
            "description": "number of characters to read; suppresses output"
          },
          "--suppress-output": {
            "type": "switch",
            "description": "don't print keystroke values"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "input list",
      "description": "Interactive list selection.",
      "parameters": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The prompt to display."
          },
          "--multi": {
            "type": "switch",
            "description": "Use multiple results, you can press a to toggle all options on/off"
          },
          "--fuzzy": {
            "type": "switch",
            "description": "Use a fuzzy select."
          },
          "--index": {
            "type": "switch",
            "description": "Returns list indexes."
          },
          "--display": {
            "type": "cell-path",
            "description": "Field to use as display value"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "input listen",
      "description": "Listen for user interface event.",
      "parameters": {
        "type": "object",
        "properties": {
          "--types": {
            "type": "list<string>",
            "description": "Listen for event of specified types only (can be one of: focus, key, mouse, paste, resize)"
          },
          "--raw": {
            "type": "switch",
            "description": "Add raw_code field with numeric value of keycode and raw_flags with bit mask flags"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "insert",
      "description": "Insert a new column, using an expression or closure to create each row's values.",
      "parameters": {
        "type": "object",
        "properties": {
          "field": {
            "type": "cell-path",
            "description": "The name of the column to insert."
          },
          "new value": {
            "type": "any",
            "description": "The new value to give the cell(s)."
          }
        },
        "required": [
          "field",
          "new value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "inspect",
      "description": "Inspect pipeline results while running a pipeline.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "interleave",
      "description": "Read multiple streams in parallel and combine them into one stream.",
      "parameters": {
        "type": "object",
        "properties": {
          "...closures": {
            "type": "closure()",
            "description": "The closures that will generate streams to be combined."
          },
          "--buffer-size": {
            "type": "int",
            "description": "Number of items to buffer from the streams. Increases memory usage, but can help performance when lots of output is produced."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into",
      "description": "Commands to convert data from one type to another.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into binary",
      "description": "Convert value to a binary primitive.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          },
          "--compact": {
            "type": "switch",
            "description": "output without padding zeros"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into bits",
      "description": "Convert value to a binary primitive.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "for a data structure input, convert data at the given cell paths"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into bool",
      "description": "Convert value to boolean.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into cell-path",
      "description": "Convert value to a cell-path.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into datetime",
      "description": "Convert text or timestamp into a datetime.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          },
          "--timezone": {
            "type": "string",
            "description": "Specify timezone if the input is a Unix timestamp. Valid options: 'UTC' ('u') or 'LOCAL' ('l')"
          },
          "--offset": {
            "type": "int",
            "description": "Specify timezone by offset from UTC if the input is a Unix timestamp, like '+8', '-4'"
          },
          "--format": {
            "type": "string",
            "description": "Specify expected format of INPUT string to parse to datetime. Use --list to see options"
          },
          "--list": {
            "type": "switch",
            "description": "Show all possible variables for use in --format flag"
          },
          "--list-human": {
            "type": "switch",
            "description": "Show human-readable datetime parsing examples"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into duration",
      "description": "Convert value to duration.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          },
          "--unit": {
            "type": "string",
            "description": "Unit to convert number into (will have an effect only with integer input)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into filesize",
      "description": "Convert value to filesize.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into float",
      "description": "Convert data into floating point number.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into glob",
      "description": "Convert value to glob.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into int",
      "description": "Convert value to integer.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          },
          "--radix": {
            "type": "number",
            "description": "radix of integer"
          },
          "--endian": {
            "type": "string",
            "description": "byte encode endian, available options: native(default), little, big"
          },
          "--signed": {
            "type": "switch",
            "description": "always treat input number as a signed number"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into record",
      "description": "Convert value to record.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into sqlite",
      "description": "Convert table into a SQLite database.",
      "parameters": {
        "type": "object",
        "properties": {
          "file-name": {
            "type": "string",
            "description": "Specify the filename to save the database to."
          },
          "--table-name": {
            "type": "string",
            "description": "Specify table name to store the data in"
          }
        },
        "required": [
          "file-name"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into string",
      "description": "Convert value to string.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert data at the given cell paths."
          },
          "--decimals": {
            "type": "int",
            "description": "decimal digits to which to round"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "into value",
      "description": "Infer nushell datatype for each cell.",
      "parameters": {
        "type": "object",
        "properties": {
          "--columns": {
            "type": "table",
            "description": "list of columns to update"
          },
          "--prefer-filesizes": {
            "type": "switch",
            "description": "For ints display them as human-readable file sizes"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "is-admin",
      "description": "Check if nushell is running with administrator or root privileges.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "is-empty",
      "description": "Check for empty values.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "The names of the columns to check emptiness."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "is-not-empty",
      "description": "Check for non-empty values.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "The names of the columns to check emptiness."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "is-terminal",
      "description": "Check if stdin, stdout, or stderr is a terminal.",
      "parameters": {
        "type": "object",
        "properties": {
          "--stdin": {
            "type": "switch",
            "description": "Check if stdin is a terminal"
          },
          "--stdout": {
            "type": "switch",
            "description": "Check if stdout is a terminal"
          },
          "--stderr": {
            "type": "switch",
            "description": "Check if stderr is a terminal"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "items",
      "description": "Given a record, iterate on each pair of column name and associated value.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any, any)",
            "description": "The closure to run."
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "join",
      "description": "Join two tables.",
      "parameters": {
        "type": "object",
        "properties": {
          "right-table": {
            "type": "list<any>",
            "description": "The right table in the join."
          },
          "left-on": {
            "type": "string",
            "description": "Name of column in input (left) table to join on."
          },
          "right-on": {
            "type": "string",
            "description": "Name of column in right table to join on. Defaults to same column as left table."
          },
          "--inner": {
            "type": "switch",
            "description": "Inner join (default)"
          },
          "--left": {
            "type": "switch",
            "description": "Left-outer join"
          },
          "--right": {
            "type": "switch",
            "description": "Right-outer join"
          },
          "--outer": {
            "type": "switch",
            "description": "Outer join"
          }
        },
        "required": [
          "right-table",
          "left-on"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "keybindings",
      "description": "Keybindings related commands.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "keybindings default",
      "description": "List default keybindings.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "keybindings list",
      "description": "List available options that can be used to create keybindings.",
      "parameters": {
        "type": "object",
        "properties": {
          "--modifiers": {
            "type": "switch",
            "description": "list of modifiers"
          },
          "--keycodes": {
            "type": "switch",
            "description": "list of keycodes"
          },
          "--modes": {
            "type": "switch",
            "description": "list of edit modes"
          },
          "--events": {
            "type": "switch",
            "description": "list of reedline event"
          },
          "--edits": {
            "type": "switch",
            "description": "list of edit commands"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "keybindings listen",
      "description": "Get input from the user.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "kill",
      "description": "Kill a process using the process id.",
      "parameters": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "int",
            "description": "Process id of process that is to be killed."
          },
          "...rest": {
            "type": "int",
            "description": "Rest of processes to kill."
          },
          "--force": {
            "type": "switch",
            "description": "forcefully kill the process"
          },
          "--quiet": {
            "type": "switch",
            "description": "won't print anything to the console"
          }
        },
        "required": [
          "pid"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "last",
      "description": "Return only the last several rows of the input. Counterpart of `first`. Opposite of `drop`.",
      "parameters": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "int",
            "description": "Starting from the back, the number of rows to return."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "length",
      "description": "Count the number of items in an input list or rows in a table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "let",
      "description": "Create a variable and give it a value.",
      "parameters": {
        "type": "object",
        "properties": {
          "var_name": {
            "type": "vardecl",
            "description": "Variable name."
          },
          "initial_value": {
            "type": "\"=\" variable",
            "description": "Equals sign followed by value."
          }
        },
        "required": [
          "var_name",
          "initial_value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "let-env",
      "description": "`let-env FOO = ...` has been removed, use `$env.FOO = ...` instead.",
      "parameters": {
        "type": "object",
        "properties": {
          "var_name": {
            "type": "string",
            "description": "Variable name."
          },
          "initial_value": {
            "type": "\"=\" variable",
            "description": "Equals sign followed by value."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "lines",
      "description": "Converts input to lines.",
      "parameters": {
        "type": "object",
        "properties": {
          "--skip-empty": {
            "type": "switch",
            "description": "skip empty lines"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "load-env",
      "description": "Loads an environment update from a record.",
      "parameters": {
        "type": "object",
        "properties": {
          "update": {
            "type": "record",
            "description": "The record to use for updates."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "loop",
      "description": "Run a block in a loop.",
      "parameters": {
        "type": "object",
        "properties": {
          "block": {
            "type": "block",
            "description": "Block to loop."
          }
        },
        "required": [
          "block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ls",
      "description": "List the filenames, sizes, and modification times of items in a directory.",
      "parameters": {
        "type": "object",
        "properties": {
          "...pattern": {
            "type": "one_of(glob, string)",
            "description": "The glob pattern to use."
          },
          "--all": {
            "type": "switch",
            "description": "Show hidden files"
          },
          "--long": {
            "type": "switch",
            "description": "Get all available columns for each entry (slower; columns are platform-dependent)"
          },
          "--short-names": {
            "type": "switch",
            "description": "Only print the file names, and not the path"
          },
          "--full-paths": {
            "type": "switch",
            "description": "display paths as absolute paths"
          },
          "--du": {
            "type": "switch",
            "description": "Display the apparent directory size (\"disk usage\") in place of the directory metadata size"
          },
          "--directory": {
            "type": "switch",
            "description": "List the specified directory itself instead of its contents"
          },
          "--mime-type": {
            "type": "switch",
            "description": "Show mime-type in type column instead of 'file' (based on filenames only; files' contents are not examined)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "main",
      "description": "",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "match",
      "description": "Conditionally run a block on a matched value.",
      "parameters": {
        "type": "object",
        "properties": {
          "value": {
            "type": "any",
            "description": "Value to check."
          },
          "match_block": {
            "type": "match-block",
            "description": "Block to run if check succeeds."
          }
        },
        "required": [
          "value",
          "match_block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math",
      "description": "Use mathematical functions as aggregate functions on a list of numbers or tables.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math abs",
      "description": "Returns the absolute value of a number.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math arccos",
      "description": "Returns the arccosine of the number.",
      "parameters": {
        "type": "object",
        "properties": {
          "--degrees": {
            "type": "switch",
            "description": "Return degrees instead of radians"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math arccosh",
      "description": "Returns the inverse of the hyperbolic cosine function.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math arcsin",
      "description": "Returns the arcsine of the number.",
      "parameters": {
        "type": "object",
        "properties": {
          "--degrees": {
            "type": "switch",
            "description": "Return degrees instead of radians"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math arcsinh",
      "description": "Returns the inverse of the hyperbolic sine function.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math arctan",
      "description": "Returns the arctangent of the number.",
      "parameters": {
        "type": "object",
        "properties": {
          "--degrees": {
            "type": "switch",
            "description": "Return degrees instead of radians"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math arctanh",
      "description": "Returns the inverse of the hyperbolic tangent function.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math avg",
      "description": "Returns the average of a list of numbers.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math ceil",
      "description": "Returns the ceil of a number (smallest integer greater than or equal to that number).",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math cos",
      "description": "Returns the cosine of the number.",
      "parameters": {
        "type": "object",
        "properties": {
          "--degrees": {
            "type": "switch",
            "description": "Use degrees instead of radians"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math cosh",
      "description": "Returns the hyperbolic cosine of the number.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math exp",
      "description": "Returns e raised to the power of x.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math floor",
      "description": "Returns the floor of a number (largest integer less than or equal to that number).",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math ln",
      "description": "Returns the natural logarithm. Base: (math e).",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math log",
      "description": "Returns the logarithm for an arbitrary base.",
      "parameters": {
        "type": "object",
        "properties": {
          "base": {
            "type": "number",
            "description": "Base for which the logarithm should be computed."
          }
        },
        "required": [
          "base"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math max",
      "description": "Returns the maximum of a list of values, or of columns in a table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math median",
      "description": "Computes the median of a list of numbers.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math min",
      "description": "Finds the minimum within a list of values or tables.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math mode",
      "description": "Returns the most frequent element(s) from a list of numbers or tables.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math product",
      "description": "Returns the product of a list of numbers or the products of each column of a table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math round",
      "description": "Returns the input number rounded to the specified precision.",
      "parameters": {
        "type": "object",
        "properties": {
          "--precision": {
            "type": "number",
            "description": "digits of precision"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math sin",
      "description": "Returns the sine of the number.",
      "parameters": {
        "type": "object",
        "properties": {
          "--degrees": {
            "type": "switch",
            "description": "Use degrees instead of radians"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math sinh",
      "description": "Returns the hyperbolic sine of the number.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math sqrt",
      "description": "Returns the square root of the input number.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math stddev",
      "description": "Returns the standard deviation of a list of numbers, or of each column in a table.",
      "parameters": {
        "type": "object",
        "properties": {
          "--sample": {
            "type": "switch",
            "description": "calculate sample standard deviation (i.e. using N-1 as the denominator)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math sum",
      "description": "Returns the sum of a list of numbers or of each column in a table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math tan",
      "description": "Returns the tangent of the number.",
      "parameters": {
        "type": "object",
        "properties": {
          "--degrees": {
            "type": "switch",
            "description": "Use degrees instead of radians"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math tanh",
      "description": "Returns the hyperbolic tangent of the number.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "math variance",
      "description": "Returns the variance of a list of numbers or of each column in a table.",
      "parameters": {
        "type": "object",
        "properties": {
          "--sample": {
            "type": "switch",
            "description": "calculate sample variance (i.e. using N-1 as the denominator)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "merge",
      "description": "Merge the input with a record or table, overwriting values in matching columns.",
      "parameters": {
        "type": "object",
        "properties": {
          "value": {
            "type": "any",
            "description": "The new value to merge with."
          }
        },
        "required": [
          "value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "metadata",
      "description": "Get the metadata for items in the stream.",
      "parameters": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "any",
            "description": "The expression you want metadata for."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "metadata access",
      "description": "Access the metadata for the input stream within a closure.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(record)",
            "description": "The closure to run with metadata access."
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "metadata set",
      "description": "Set the metadata for items in the stream.",
      "parameters": {
        "type": "object",
        "properties": {
          "--datasource-ls": {
            "type": "switch",
            "description": "Assign the DataSource::Ls metadata to the input"
          },
          "--datasource-filepath": {
            "type": "path",
            "description": "Assign the DataSource::FilePath metadata to the input"
          },
          "--content-type": {
            "type": "string",
            "description": "Assign content type metadata to the input"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "mkdir",
      "description": "Create directories, with intermediary directories if required using uutils/coreutils mkdir.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "one_of(glob, directory)",
            "description": "The name(s) of the path(s) to create."
          },
          "--verbose": {
            "type": "switch",
            "description": "print a message for each created directory."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "mktemp",
      "description": "Create temporary files or directories using uutils/coreutils mktemp.",
      "parameters": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Optional pattern from which the name of the file or directory is derived. Must contain at least three 'X's in last component."
          },
          "--suffix": {
            "type": "string",
            "description": "Append suffix to template; must not contain a slash."
          },
          "--tmpdir-path": {
            "type": "path",
            "description": "Interpret TEMPLATE relative to tmpdir-path. If tmpdir-path is not set use $TMPDIR"
          },
          "--tmpdir": {
            "type": "switch",
            "description": "Interpret TEMPLATE relative to the system temporary directory."
          },
          "--directory": {
            "type": "switch",
            "description": "Create a directory instead of a file."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "module",
      "description": "Define a custom module.",
      "parameters": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Module name or module path."
          },
          "block": {
            "type": "block",
            "description": "Body of the module if 'module' parameter is not a module path."
          }
        },
        "required": [
          "module"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "move",
      "description": "Move columns before or after other columns.",
      "parameters": {
        "type": "object",
        "properties": {
          "...columns": {
            "type": "string",
            "description": "The columns to move."
          },
          "--after": {
            "type": "string",
            "description": "the column that will precede the columns moved"
          },
          "--before": {
            "type": "string",
            "description": "the column that will be the next after the columns moved"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "mut",
      "description": "Create a mutable variable and give it a value.",
      "parameters": {
        "type": "object",
        "properties": {
          "var_name": {
            "type": "vardecl",
            "description": "Variable name."
          },
          "initial_value": {
            "type": "\"=\" variable",
            "description": "Equals sign followed by value."
          }
        },
        "required": [
          "var_name",
          "initial_value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "mv",
      "description": "Move files or directories using uutils/coreutils mv.",
      "parameters": {
        "type": "object",
        "properties": {
          "...paths": {
            "type": "one_of(glob, string)",
            "description": "Rename SRC to DST, or move SRC to DIR."
          },
          "--force": {
            "type": "switch",
            "description": "do not prompt before overwriting"
          },
          "--verbose": {
            "type": "switch",
            "description": "explain what is being done."
          },
          "--progress": {
            "type": "switch",
            "description": "display a progress bar"
          },
          "--interactive": {
            "type": "switch",
            "description": "prompt before overwriting"
          },
          "--update": {
            "type": "switch",
            "description": "move and overwrite only when the SOURCE file is newer than the destination file or when the destination file is missing"
          },
          "--no-clobber": {
            "type": "switch",
            "description": "do not overwrite an existing file"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "next",
      "description": "Alias for `next`",
      "parameters": {
        "type": "object",
        "properties": {
          "N": {
            "type": "int",
            "description": "number of positions to move."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "notify",
      "description": "Send a desktop notification with customizable parameters.",
      "parameters": {
        "type": "object",
        "properties": {
          "--summary": {
            "type": "string",
            "description": "summary of the notification"
          },
          "--body": {
            "type": "string",
            "description": "body of the notification"
          },
          "--subtitle": {
            "type": "string",
            "description": "subtitle of the notification [macOS only]"
          },
          "--app-name": {
            "type": "string",
            "description": "app name of the notification"
          },
          "--icon": {
            "type": "path",
            "description": "path to the icon of the notification"
          },
          "--timeout": {
            "type": "duration",
            "description": "duration of the notification [XDG Desktops only] (defaults to system default)"
          },
          "--crash-on-error": {
            "type": "path",
            "description": "returns notification error if encountered"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "nu-check",
      "description": "Validate and parse input content.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "File path to parse."
          },
          "--as-module": {
            "type": "switch",
            "description": "Parse content as module"
          },
          "--debug": {
            "type": "switch",
            "description": "Show error messages"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "nu-highlight",
      "description": "Syntax highlight the input string.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "open",
      "description": "Load a file into a cell, converting to table if possible (avoid by appending '--raw').",
      "parameters": {
        "type": "object",
        "properties": {
          "...files": {
            "type": "one_of(glob, string)",
            "description": "The file(s) to open."
          },
          "--raw": {
            "type": "switch",
            "description": "open file as raw binary"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "overlay",
      "description": "Commands for manipulating overlays.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "overlay hide",
      "description": "Hide an active overlay.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Overlay to hide."
          },
          "--keep-custom": {
            "type": "switch",
            "description": "Keep all newly added commands and aliases in the next activated overlay."
          },
          "--keep-env": {
            "type": "list<string>",
            "description": "List of environment variables to keep in the next activated overlay"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "overlay list",
      "description": "List all active overlays.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "overlay new",
      "description": "Create an empty overlay.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the overlay."
          }
        },
        "required": [
          "name"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "overlay use",
      "description": "Use definitions from a module as an overlay.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Module name to use overlay for."
          },
          "as": {
            "type": "\"as\" string",
            "description": "`as` keyword followed by a new name."
          },
          "--prefix": {
            "type": "switch",
            "description": "Prepend module name to the imported commands and aliases"
          },
          "--reload": {
            "type": "switch",
            "description": "If the overlay already exists, reload its definitions and environment."
          }
        },
        "required": [
          "name"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "prev",
      "description": "Alias for `prev`",
      "parameters": {
        "type": "object",
        "properties": {
          "N": {
            "type": "int",
            "description": "number of positions to move."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "panic",
      "description": "Causes nushell to panic.",
      "parameters": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "description": "The custom message for the panic."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "par-each",
      "description": "Run a closure on each row of the input list in parallel, creating a new list with the results.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any, int)",
            "description": "The closure to run."
          },
          "--threads": {
            "type": "int",
            "description": "the number of threads to use"
          },
          "--keep-order": {
            "type": "switch",
            "description": "keep sequence of output same as the order of input"
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "parse",
      "description": "Parse columns from string data using a simple pattern or a supplied regular expression.",
      "parameters": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "description": "The pattern to match."
          },
          "--regex": {
            "type": "switch",
            "description": "use full regex syntax for patterns"
          }
        },
        "required": [
          "pattern"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path",
      "description": "Explore and manipulate paths.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path basename",
      "description": "Get the final component of a path.",
      "parameters": {
        "type": "object",
        "properties": {
          "--replace": {
            "type": "string",
            "description": "Return original path with basename replaced by this string"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path dirname",
      "description": "Get the parent directory of a path.",
      "parameters": {
        "type": "object",
        "properties": {
          "--replace": {
            "type": "string",
            "description": "Return original path with dirname replaced by this string"
          },
          "--num-levels": {
            "type": "int",
            "description": "Number of directories to walk up"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path exists",
      "description": "Check whether a path exists.",
      "parameters": {
        "type": "object",
        "properties": {
          "--no-symlink": {
            "type": "switch",
            "description": "Do not resolve symbolic links"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path expand",
      "description": "Try to expand a path to its absolute form.",
      "parameters": {
        "type": "object",
        "properties": {
          "--strict": {
            "type": "switch",
            "description": "Throw an error if the path could not be expanded"
          },
          "--no-symlink": {
            "type": "switch",
            "description": "Do not resolve symbolic links"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path join",
      "description": "Join a structured path or a list of path parts.",
      "parameters": {
        "type": "object",
        "properties": {
          "...append": {
            "type": "string",
            "description": "Path to append to the input."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path parse",
      "description": "Convert a path into structured data.",
      "parameters": {
        "type": "object",
        "properties": {
          "--extension": {
            "type": "string",
            "description": "Manually supply the extension (without the dot)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path relative-to",
      "description": "Express a path as relative to another path.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Parent shared with the input path."
          }
        },
        "required": [
          "path"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path split",
      "description": "Split a path into a list based on the system's path separator.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "path type",
      "description": "Get the type of the object a path refers to (e.g., file, dir, symlink).",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "plugin",
      "description": "Commands for managing plugins.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "plugin add",
      "description": "Add a plugin to the plugin registry file.",
      "parameters": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "path",
            "description": "Path to the executable for the plugin"
          },
          "--plugin-config": {
            "type": "path",
            "description": "Use a plugin registry file other than the one set in `$nu.plugin-path`"
          },
          "--shell": {
            "type": "path",
            "description": "Use an additional shell program (cmd, sh, python, etc.) to run the plugin"
          }
        },
        "required": [
          "filename"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "plugin list",
      "description": "List installed plugins.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "plugin rm",
      "description": "Remove a plugin from the plugin registry file.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name, or filename, of the plugin to remove"
          },
          "--plugin-config": {
            "type": "path",
            "description": "Use a plugin registry file other than the one set in `$nu.plugin-path`"
          },
          "--force": {
            "type": "switch",
            "description": "Don't cause an error if the plugin name wasn't found in the file"
          }
        },
        "required": [
          "name"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "plugin stop",
      "description": "Stop an installed plugin if it was running.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name, or filename, of the plugin to stop"
          }
        },
        "required": [
          "name"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "plugin use",
      "description": "Load a plugin from the plugin registry file into scope.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name, or filename, of the plugin to load"
          },
          "--plugin-config": {
            "type": "path",
            "description": "Use a plugin registry file other than the one set in `$nu.plugin-path`"
          }
        },
        "required": [
          "name"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "port",
      "description": "Get a free port from system.",
      "parameters": {
        "type": "object",
        "properties": {
          "start": {
            "type": "int",
            "description": "The start port to scan (inclusive)."
          },
          "end": {
            "type": "int",
            "description": "The end port to scan (inclusive)."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "prepend",
      "description": "Prepend any number of rows to a table.",
      "parameters": {
        "type": "object",
        "properties": {
          "row": {
            "type": "any",
            "description": "The row, list, or table to prepend."
          }
        },
        "required": [
          "row"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "print",
      "description": "Print the given values to stdout.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "any",
            "description": "the values to print"
          },
          "--no-newline": {
            "type": "switch",
            "description": "print without inserting a newline for the line ending"
          },
          "--stderr": {
            "type": "switch",
            "description": "print to stderr instead of stdout"
          },
          "--raw": {
            "type": "switch",
            "description": "print without formatting (including binary data)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "ps",
      "description": "View information about system processes.",
      "parameters": {
        "type": "object",
        "properties": {
          "--long": {
            "type": "switch",
            "description": "list all available columns for each entry"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "pwd",
      "description": "Return the current working directory\r",
      "parameters": {
        "type": "object",
        "properties": {
          "--physical": {
            "type": "switch",
            "description": "resolve symbolic links"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "query db",
      "description": "Query a database using SQL.",
      "parameters": {
        "type": "object",
        "properties": {
          "SQL": {
            "type": "string",
            "description": "SQL to execute against the database."
          },
          "--params": {
            "type": "any",
            "description": "List of parameters for the SQL statement"
          }
        },
        "required": [
          "SQL"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random",
      "description": "Generate a random value.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random binary",
      "description": "Generate random bytes.",
      "parameters": {
        "type": "object",
        "properties": {
          "length": {
            "type": "int",
            "description": "Length of the output binary."
          }
        },
        "required": [
          "length"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random bool",
      "description": "Generate a random boolean value.",
      "parameters": {
        "type": "object",
        "properties": {
          "--bias": {
            "type": "number",
            "description": "Adjusts the probability of a \"true\" outcome"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random chars",
      "description": "Generate random chars uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",
      "parameters": {
        "type": "object",
        "properties": {
          "--length": {
            "type": "int",
            "description": "Number of chars (default 25)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random dice",
      "description": "Generate a random dice roll.",
      "parameters": {
        "type": "object",
        "properties": {
          "--dice": {
            "type": "int",
            "description": "The amount of dice being rolled"
          },
          "--sides": {
            "type": "int",
            "description": "The amount of sides a die has"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random float",
      "description": "Generate a random float within a range [min..max].",
      "parameters": {
        "type": "object",
        "properties": {
          "range": {
            "type": "range",
            "description": "Range of values."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random int",
      "description": "Generate a random integer [min..max].",
      "parameters": {
        "type": "object",
        "properties": {
          "range": {
            "type": "range",
            "description": "Range of potential values, inclusive of both start and end values."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "random uuid",
      "description": "Generate a random uuid4 string.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "range",
      "description": "Return only the selected rows.",
      "parameters": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "range",
            "description": "Range of rows to return."
          }
        },
        "required": [
          "rows"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "reduce",
      "description": "Aggregate a list (starting from the left) to a single value using an accumulator closure.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any, any, int)",
            "description": "Reducing function."
          },
          "--fold": {
            "type": "any",
            "description": "reduce with initial value"
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "registry query",
      "description": "Query the Windows registry.",
      "parameters": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Registry key to query."
          },
          "value": {
            "type": "string",
            "description": "Optionally supply a registry value to query."
          },
          "--hkcr": {
            "type": "switch",
            "description": "query the hkey_classes_root hive"
          },
          "--hkcu": {
            "type": "switch",
            "description": "query the hkey_current_user hive"
          },
          "--hklm": {
            "type": "switch",
            "description": "query the hkey_local_machine hive"
          },
          "--hku": {
            "type": "switch",
            "description": "query the hkey_users hive"
          },
          "--hkpd": {
            "type": "switch",
            "description": "query the hkey_performance_data hive"
          },
          "--hkpt": {
            "type": "switch",
            "description": "query the hkey_performance_text hive"
          },
          "--hkpnls": {
            "type": "switch",
            "description": "query the hkey_performance_nls_text hive"
          },
          "--hkcc": {
            "type": "switch",
            "description": "query the hkey_current_config hive"
          },
          "--hkdd": {
            "type": "switch",
            "description": "query the hkey_dyn_data hive"
          },
          "--hkculs": {
            "type": "switch",
            "description": "query the hkey_current_user_local_settings hive"
          },
          "--no-expand": {
            "type": "switch",
            "description": "do not expand %ENV% placeholders in REG_EXPAND_SZ"
          }
        },
        "required": [
          "key"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "reject",
      "description": "Remove the given columns or rows from the table. Opposite of `select`.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "The names of columns to remove from the table."
          },
          "--ignore-errors": {
            "type": "switch",
            "description": "ignore missing data (make all cell path members optional)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "rename",
      "description": "Creates a new table with columns renamed.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "The new names for the columns."
          },
          "--column": {
            "type": "record",
            "description": "column name to be changed"
          },
          "--block": {
            "type": "closure(any)",
            "description": "A closure to apply changes on each column"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "return",
      "description": "Return early from a function.",
      "parameters": {
        "type": "object",
        "properties": {
          "return_value": {
            "type": "any",
            "description": "Optional value to return."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "reverse",
      "description": "Reverses the input list or table.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "rm",
      "description": "Remove files and directories.",
      "parameters": {
        "type": "object",
        "properties": {
          "...paths": {
            "type": "one_of(glob, string)",
            "description": "The file paths(s) to remove."
          },
          "--trash": {
            "type": "switch",
            "description": "move to the platform's trash instead of permanently deleting. not used on android and ios"
          },
          "--permanent": {
            "type": "switch",
            "description": "delete permanently, ignoring the 'always_trash' config option. always enabled on android and ios"
          },
          "--recursive": {
            "type": "switch",
            "description": "delete subdirectories recursively"
          },
          "--force": {
            "type": "switch",
            "description": "suppress error when no file"
          },
          "--verbose": {
            "type": "switch",
            "description": "print names of deleted files"
          },
          "--interactive": {
            "type": "switch",
            "description": "ask user to confirm action"
          },
          "--interactive-once": {
            "type": "switch",
            "description": "ask user to confirm action only once"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "roll",
      "description": "Rolling commands for tables.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "roll down",
      "description": "Roll table rows down.",
      "parameters": {
        "type": "object",
        "properties": {
          "--by": {
            "type": "int",
            "description": "Number of rows to roll"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "roll left",
      "description": "Roll record or table columns left.",
      "parameters": {
        "type": "object",
        "properties": {
          "--by": {
            "type": "int",
            "description": "Number of columns to roll"
          },
          "--cells-only": {
            "type": "switch",
            "description": "rotates columns leaving headers fixed"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "roll right",
      "description": "Roll table columns right.",
      "parameters": {
        "type": "object",
        "properties": {
          "--by": {
            "type": "int",
            "description": "Number of columns to roll"
          },
          "--cells-only": {
            "type": "switch",
            "description": "rotates columns leaving headers fixed"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "roll up",
      "description": "Roll table rows up.",
      "parameters": {
        "type": "object",
        "properties": {
          "--by": {
            "type": "int",
            "description": "Number of rows to roll"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "rotate",
      "description": "Rotates a table or record clockwise (default) or counter-clockwise (use --ccw flag).",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "the names to give columns once rotated"
          },
          "--ccw": {
            "type": "switch",
            "description": "rotate counter clockwise"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "run-external",
      "description": "Runs external command.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "one_of(glob, string)",
            "description": "External command to run."
          },
          "...args": {
            "type": "one_of(glob, any)",
            "description": "Arguments for external command."
          }
        },
        "required": [
          "command"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "save",
      "description": "Save a file.",
      "parameters": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "path",
            "description": "The filename to use."
          },
          "--stderr": {
            "type": "path",
            "description": "the filename used to save stderr, only works with `-r` flag"
          },
          "--raw": {
            "type": "switch",
            "description": "save file as raw binary"
          },
          "--append": {
            "type": "switch",
            "description": "append input to the end of the file"
          },
          "--force": {
            "type": "switch",
            "description": "overwrite the destination"
          },
          "--progress": {
            "type": "switch",
            "description": "enable progress bar"
          }
        },
        "required": [
          "filename"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "schema",
      "description": "Show the schema of a SQLite database.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "scope",
      "description": "Commands for getting info about what is in scope.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "scope aliases",
      "description": "Output info on the aliases in the current scope.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "scope commands",
      "description": "Output info on the commands in the current scope.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "scope engine-stats",
      "description": "Output stats on the engine in the current state.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "scope externs",
      "description": "Output info on the known externals in the current scope.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "scope modules",
      "description": "Output info on the modules in the current scope.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "scope variables",
      "description": "Output info on the variables in the current scope.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "select",
      "description": "Select only these columns or rows from the input. Opposite of `reject`.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "The columns to select from the table."
          },
          "--ignore-errors": {
            "type": "switch",
            "description": "ignore missing data (make all cell path members optional)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "seq",
      "description": "Output sequences of numbers.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "number",
            "description": "Sequence values."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "seq char",
      "description": "Print a sequence of ASCII characters.",
      "parameters": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Start of character sequence (inclusive)."
          },
          "end": {
            "type": "string",
            "description": "End of character sequence (inclusive)."
          }
        },
        "required": [
          "start",
          "end"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "seq date",
      "description": "Print sequences of dates.",
      "parameters": {
        "type": "object",
        "properties": {
          "--output-format": {
            "type": "string",
            "description": "prints dates in this format (defaults to %Y-%m-%d)"
          },
          "--input-format": {
            "type": "string",
            "description": "give argument dates in this format (defaults to %Y-%m-%d)"
          },
          "--begin-date": {
            "type": "string",
            "description": "beginning date range"
          },
          "--end-date": {
            "type": "string",
            "description": "ending date"
          },
          "--increment": {
            "type": "int",
            "description": "increment dates by this number"
          },
          "--days": {
            "type": "int",
            "description": "number of days to print"
          },
          "--reverse": {
            "type": "switch",
            "description": "print dates in reverse"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "show",
      "description": "Alias for `show`",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "shuffle",
      "description": "Shuffle rows randomly.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "skip",
      "description": "Skip the first several rows of the input. Counterpart of `drop`. Opposite of `first`.",
      "parameters": {
        "type": "object",
        "properties": {
          "n": {
            "type": "int",
            "description": "The number of elements to skip."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "skip until",
      "description": "Skip elements of the input until a predicate is true.",
      "parameters": {
        "type": "object",
        "properties": {
          "predicate": {
            "type": "closure(any, int)",
            "description": "The predicate that skipped element must not match."
          }
        },
        "required": [
          "predicate"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "skip while",
      "description": "Skip elements of the input while a predicate is true.",
      "parameters": {
        "type": "object",
        "properties": {
          "predicate": {
            "type": "closure(any, int)",
            "description": "The predicate that skipped element must match."
          }
        },
        "required": [
          "predicate"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sleep",
      "description": "Delay for a specified amount of time.",
      "parameters": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "duration",
            "description": "Time to sleep."
          },
          "...rest": {
            "type": "duration",
            "description": "Additional time."
          }
        },
        "required": [
          "duration"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sort",
      "description": "Sort in increasing order.",
      "parameters": {
        "type": "object",
        "properties": {
          "--reverse": {
            "type": "switch",
            "description": "Sort in reverse order"
          },
          "--ignore-case": {
            "type": "switch",
            "description": "Sort string-based data case-insensitively"
          },
          "--values": {
            "type": "switch",
            "description": "If input is a single record, sort the record by values; ignored if input is not a single record"
          },
          "--natural": {
            "type": "switch",
            "description": "Sort alphanumeric string-based values naturally (1, 9, 10, 99, 100, ...)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sort-by",
      "description": "Sort by the given columns, in increasing order.",
      "parameters": {
        "type": "object",
        "properties": {
          "...columns": {
            "type": "any",
            "description": "The column(s) to sort by."
          },
          "--reverse": {
            "type": "switch",
            "description": "Sort in reverse order"
          },
          "--ignore-case": {
            "type": "switch",
            "description": "Sort string-based columns case-insensitively"
          },
          "--natural": {
            "type": "switch",
            "description": "Sort alphanumeric string-based columns naturally (1, 9, 10, 99, 100, ...)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sound beep",
      "description": "creates a beep noise",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sound make",
      "description": "creates a noise with given frequency and duration",
      "parameters": {
        "type": "object",
        "properties": {
          "Frequency": {
            "type": "float",
            "description": "Frequency of the noise"
          },
          "duration": {
            "type": "duration",
            "description": "duration of the noise"
          },
          "--amplify": {
            "type": "float",
            "description": "amplify the sound by given value"
          }
        },
        "required": [
          "Frequency",
          "duration"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sound meta",
      "description": "get duration and meta data of an audio file",
      "parameters": {
        "type": "object",
        "properties": {
          "File Path": {
            "type": "path",
            "description": "file to play"
          },
          "--all": {
            "type": "switch",
            "description": "List all possible frame names"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sound meta set",
      "description": "set a id3 frame on an audio file",
      "parameters": {
        "type": "object",
        "properties": {
          "File Path": {
            "type": "path",
            "description": "file to update"
          },
          "--key": {
            "type": "string",
            "description": "id3 key"
          },
          "--value": {
            "type": "string",
            "description": "id3 value"
          }
        },
        "required": [
          "File Path",
          "--key(-k)",
          "--value(-v)"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sound play",
      "description": "play an audio file, by default supports flac,Wav,mp3 and ogg files, install plugin with `all-decoders` feature to include aac and mp4(audio)",
      "parameters": {
        "type": "object",
        "properties": {
          "File Path": {
            "type": "path",
            "description": "file to play"
          },
          "--duration": {
            "type": "duration",
            "description": "duration of file (mandatory for non-wave formats like mp3) (default 1 hour)"
          }
        },
        "required": [
          "File Path"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "source",
      "description": "Runs a script file in the current context.",
      "parameters": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "path",
            "description": "The filepath to the script file to source."
          }
        },
        "required": [
          "filename"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "source-env",
      "description": "Source the environment from a source file into the current environment.",
      "parameters": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "The filepath to the script file to source the environment from."
          }
        },
        "required": [
          "filename"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split",
      "description": "Split contents across desired subcommand (like row, column) via the separator.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split cell-path",
      "description": "Split a cell-path into its components.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split chars",
      "description": "Split a string into a list of characters.",
      "parameters": {
        "type": "object",
        "properties": {
          "--grapheme-clusters": {
            "type": "switch",
            "description": "split on grapheme clusters"
          },
          "--code-points": {
            "type": "switch",
            "description": "split on code points (default; splits combined characters)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split column",
      "description": "Split a string into multiple columns using a separator.",
      "parameters": {
        "type": "object",
        "properties": {
          "separator": {
            "type": "string",
            "description": "The character or string that denotes what separates columns."
          },
          "...rest": {
            "type": "string",
            "description": "Column names to give the new columns."
          },
          "--collapse-empty": {
            "type": "switch",
            "description": "remove empty columns"
          },
          "--number": {
            "type": "int",
            "description": "Split into maximum number of items"
          },
          "--regex": {
            "type": "switch",
            "description": "separator is a regular expression"
          }
        },
        "required": [
          "separator"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split list",
      "description": "Split a list into multiple lists using a separator.",
      "parameters": {
        "type": "object",
        "properties": {
          "separator": {
            "type": "any",
            "description": "The value that denotes what separates the list."
          },
          "--regex": {
            "type": "switch",
            "description": "separator is a regular expression, matching values that can be coerced into a string"
          }
        },
        "required": [
          "separator"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split row",
      "description": "Split a string into multiple rows using a separator.",
      "parameters": {
        "type": "object",
        "properties": {
          "separator": {
            "type": "string",
            "description": "A character or regex that denotes what separates rows."
          },
          "--number": {
            "type": "int",
            "description": "Split into maximum number of items"
          },
          "--regex": {
            "type": "switch",
            "description": "use regex syntax for separator"
          }
        },
        "required": [
          "separator"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split words",
      "description": "Split a string's words into separate rows.",
      "parameters": {
        "type": "object",
        "properties": {
          "--min-word-length": {
            "type": "int",
            "description": "The minimum word length"
          },
          "--grapheme-clusters": {
            "type": "switch",
            "description": "measure word length in grapheme clusters (requires -l)"
          },
          "--utf-8-bytes": {
            "type": "switch",
            "description": "measure word length in UTF-8 bytes (default; requires -l; non-ASCII chars are length 2+)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "split-by",
      "description": "Split a record into groups.",
      "parameters": {
        "type": "object",
        "properties": {
          "splitter": {
            "type": "any",
            "description": "The splitter value to use."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "start",
      "description": "Open a folder, file or website in the default application or viewer.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to open."
          }
        },
        "required": [
          "path"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor",
      "description": "Various commands for working with the in-memory sqlite database.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor create",
      "description": "Create a table in the in-memory sqlite database.",
      "parameters": {
        "type": "object",
        "properties": {
          "--table-name": {
            "type": "string",
            "description": "name of the table you want to create"
          },
          "--columns": {
            "type": "record",
            "description": "a record of column names and datatypes"
          }
        },
        "required": [
          "--table-name(-t)",
          "--columns(-c)"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor delete",
      "description": "Delete a table or specified rows in the in-memory sqlite database.",
      "parameters": {
        "type": "object",
        "properties": {
          "--table-name": {
            "type": "string",
            "description": "name of the table you want to insert into"
          },
          "--where-clause": {
            "type": "string",
            "description": "a sql string to use as a where clause without the WHERE keyword"
          }
        },
        "required": [
          "--table-name(-t)"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor export",
      "description": "Export the in-memory sqlite database to a sqlite database file.",
      "parameters": {
        "type": "object",
        "properties": {
          "--file-name": {
            "type": "string",
            "description": "file name to export the sqlite in-memory database to"
          }
        },
        "required": [
          "--file-name(-f)"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor import",
      "description": "Import a sqlite database file into the in-memory sqlite database.",
      "parameters": {
        "type": "object",
        "properties": {
          "--file-name": {
            "type": "string",
            "description": "file name to import the sqlite in-memory database from"
          }
        },
        "required": [
          "--file-name(-f)"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor insert",
      "description": "Insert information into a specified table in the in-memory sqlite database.",
      "parameters": {
        "type": "object",
        "properties": {
          "--table-name": {
            "type": "string",
            "description": "name of the table you want to insert into"
          },
          "--data-record": {
            "type": "record",
            "description": "a record of column names and column values to insert into the specified table"
          }
        },
        "required": [
          "--table-name(-t)"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor open",
      "description": "Opens the in-memory sqlite database.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor reset",
      "description": "Reset the in-memory database by dropping all tables.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "stor update",
      "description": "Update information in a specified table in the in-memory sqlite database.",
      "parameters": {
        "type": "object",
        "properties": {
          "--table-name": {
            "type": "string",
            "description": "name of the table you want to insert into"
          },
          "--update-record": {
            "type": "record",
            "description": "a record of column names and column values to update in the specified table"
          },
          "--where-clause": {
            "type": "string",
            "description": "a sql string to use as a where clause without the WHERE keyword"
          }
        },
        "required": [
          "--table-name(-t)"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str",
      "description": "Various commands for working with string data.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str camel-case",
      "description": "Convert a string to camelCase.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str capitalize",
      "description": "Capitalize first letter of text.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str contains",
      "description": "Checks if string input contains a substring.",
      "parameters": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "description": "The substring to find."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, check strings at the given cell paths, and replace with result."
          },
          "--ignore-case": {
            "type": "switch",
            "description": "search is case insensitive"
          }
        },
        "required": [
          "string"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str distance",
      "description": "Compare two strings and return the edit distance/Levenshtein distance.",
      "parameters": {
        "type": "object",
        "properties": {
          "compare-string": {
            "type": "string",
            "description": "The first string to compare."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, check strings at the given cell paths, and replace with result."
          }
        },
        "required": [
          "compare-string"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str downcase",
      "description": "Make text lowercase.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str ends-with",
      "description": "Check if an input ends with a string.",
      "parameters": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "description": "The string to match."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, check strings at the given cell paths, and replace with result."
          },
          "--ignore-case": {
            "type": "switch",
            "description": "search is case insensitive"
          }
        },
        "required": [
          "string"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str expand",
      "description": "Generates all possible combinations defined in brace expansion syntax.",
      "parameters": {
        "type": "object",
        "properties": {
          "--path": {
            "type": "switch",
            "description": "Replaces all backslashes with double backslashes, useful for Path."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str index-of",
      "description": "Returns start index of first occurrence of string in input, or -1 if no match.",
      "parameters": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "description": "The string to find in the input."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, search strings at the given cell paths, and replace with result."
          },
          "--grapheme-clusters": {
            "type": "switch",
            "description": "count indexes using grapheme clusters (all visible chars have length 1)"
          },
          "--utf-8-bytes": {
            "type": "switch",
            "description": "count indexes using UTF-8 bytes (default; non-ASCII chars have length 2+)"
          },
          "--range": {
            "type": "range",
            "description": "optional start and/or end index"
          },
          "--end": {
            "type": "switch",
            "description": "search from the end of the input"
          }
        },
        "required": [
          "string"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str join",
      "description": "Concatenate multiple strings into a single string, with an optional separator between each.",
      "parameters": {
        "type": "object",
        "properties": {
          "separator": {
            "type": "string",
            "description": "Optional separator to use when creating string."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str kebab-case",
      "description": "Convert a string to kebab-case.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str length",
      "description": "Output the length of any strings in the pipeline.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, replace strings at the given cell paths with their length."
          },
          "--grapheme-clusters": {
            "type": "switch",
            "description": "count length using grapheme clusters (all visible chars have length 1)"
          },
          "--utf-8-bytes": {
            "type": "switch",
            "description": "count length using UTF-8 bytes (default; all non-ASCII chars have length 2+)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str pascal-case",
      "description": "Convert a string to PascalCase.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str replace",
      "description": "Find and replace text.",
      "parameters": {
        "type": "object",
        "properties": {
          "find": {
            "type": "string",
            "description": "The pattern to find."
          },
          "replace": {
            "type": "string",
            "description": "The replacement string."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, operate on strings at the given cell paths."
          },
          "--all": {
            "type": "switch",
            "description": "replace all occurrences of the pattern"
          },
          "--no-expand": {
            "type": "switch",
            "description": "do not expand capture groups (like $name) in the replacement string"
          },
          "--regex": {
            "type": "switch",
            "description": "match the pattern as a regular expression in the input, instead of a substring"
          },
          "--multiline": {
            "type": "switch",
            "description": "multi-line regex mode (implies --regex): ^ and $ match begin/end of line; equivalent to (?m)"
          }
        },
        "required": [
          "find",
          "replace"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str reverse",
      "description": "Reverse every string in the pipeline.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, reverse strings at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str screaming-snake-case",
      "description": "Convert a string to SCREAMING_SNAKE_CASE.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str snake-case",
      "description": "Convert a string to snake_case.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str starts-with",
      "description": "Check if an input starts with a string.",
      "parameters": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "description": "The string to match."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, check strings at the given cell paths, and replace with result."
          },
          "--ignore-case": {
            "type": "switch",
            "description": "search is case insensitive"
          }
        },
        "required": [
          "string"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str stats",
      "description": "Gather word count statistics on the text.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str substring",
      "description": "Get part of a string. Note that the first character of a string is index 0.",
      "parameters": {
        "type": "object",
        "properties": {
          "range": {
            "type": "any",
            "description": "The indexes to substring [start end]."
          },
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, turn strings at the given cell paths into substrings."
          },
          "--grapheme-clusters": {
            "type": "switch",
            "description": "count indexes and split using grapheme clusters (all visible chars have length 1)"
          },
          "--utf-8-bytes": {
            "type": "switch",
            "description": "count indexes and split using UTF-8 bytes (default; non-ASCII chars have length 2+)"
          }
        },
        "required": [
          "range"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str title-case",
      "description": "Convert a string to Title Case.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str trim",
      "description": "Trim whitespace or specific character.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, trim strings at the given cell paths."
          },
          "--char": {
            "type": "string",
            "description": "character to trim (default: whitespace)"
          },
          "--left": {
            "type": "switch",
            "description": "trims characters only from the beginning of the string"
          },
          "--right": {
            "type": "switch",
            "description": "trims characters only from the end of the string"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "str upcase",
      "description": "Make text uppercase.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, convert strings at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys",
      "description": "View information about the system.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys cpu",
      "description": "View information about the system CPUs.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys disks",
      "description": "View information about the system disks.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys host",
      "description": "View information about the system host.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys mem",
      "description": "View information about the system memory.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys net",
      "description": "View information about the system network interfaces.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys temp",
      "description": "View the temperatures of system components.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "sys users",
      "description": "View information about the users on the system.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "table",
      "description": "Render the table.",
      "parameters": {
        "type": "object",
        "properties": {
          "--theme": {
            "type": "string",
            "description": "set a table mode/theme"
          },
          "--index": {
            "type": "any",
            "description": "enable (true) or disable (false) the #/index column or set the starting index"
          },
          "--width": {
            "type": "int",
            "description": "number of terminal columns wide (not output columns)"
          },
          "--expand": {
            "type": "switch",
            "description": "expand the table structure in a light mode"
          },
          "--expand-deep": {
            "type": "int",
            "description": "an expand limit of recursion which will take place, must be used with --expand"
          },
          "--flatten": {
            "type": "switch",
            "description": "Flatten simple arrays"
          },
          "--flatten-separator": {
            "type": "string",
            "description": "sets a separator when 'flatten' used"
          },
          "--collapse": {
            "type": "switch",
            "description": "expand the table structure in collapse mode.\nBe aware collapse mode currently doesn't support width control"
          },
          "--abbreviated": {
            "type": "int",
            "description": "abbreviate the data in the table by truncating the middle part and only showing amount provided on top and bottom"
          },
          "--list": {
            "type": "switch",
            "description": "list available table modes/themes"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "take",
      "description": "Take only the first n elements of a list, or the first n bytes of a binary value.",
      "parameters": {
        "type": "object",
        "properties": {
          "n": {
            "type": "int",
            "description": "Starting from the front, the number of elements to return."
          }
        },
        "required": [
          "n"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "take until",
      "description": "Take elements of the input until a predicate is true.",
      "parameters": {
        "type": "object",
        "properties": {
          "predicate": {
            "type": "closure(any, int)",
            "description": "The predicate that element(s) must not match."
          }
        },
        "required": [
          "predicate"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "take while",
      "description": "Take elements of the input while a predicate is true.",
      "parameters": {
        "type": "object",
        "properties": {
          "predicate": {
            "type": "closure(any, int)",
            "description": "The predicate that element(s) must match."
          }
        },
        "required": [
          "predicate"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "tee",
      "description": "Copy a stream to another command in parallel.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure()",
            "description": "The other command to send the stream to."
          },
          "--stderr": {
            "type": "switch",
            "description": "For external commands: copy the standard error stream instead."
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "term size",
      "description": "Returns a record containing the number of columns (width) and rows (height) of the terminal.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "timeit",
      "description": "Time the running time of a block.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "one_of(block, expression)",
            "description": "The command or block to run."
          }
        },
        "required": [
          "command"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to",
      "description": "Translate structured data to a format.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to csv",
      "description": "Convert table into .csv text .",
      "parameters": {
        "type": "object",
        "properties": {
          "--separator": {
            "type": "string",
            "description": "a character to separate columns, defaults to ','"
          },
          "--noheaders": {
            "type": "switch",
            "description": "do not output the columns names as the first row"
          },
          "--columns": {
            "type": "list<string>",
            "description": "the names (in order) of the columns to use"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to html",
      "description": "Convert table into simple HTML.",
      "parameters": {
        "type": "object",
        "properties": {
          "--html-color": {
            "type": "switch",
            "description": "change ansi colors to html colors"
          },
          "--no-color": {
            "type": "switch",
            "description": "remove all ansi colors in output"
          },
          "--dark": {
            "type": "switch",
            "description": "indicate your background color is a darker color"
          },
          "--partial": {
            "type": "switch",
            "description": "only output the html for the content itself"
          },
          "--theme": {
            "type": "string",
            "description": "the name of the theme to use (github, blulocolight, ...)"
          },
          "--list": {
            "type": "switch",
            "description": "produce a color table of all available themes"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to json",
      "description": "Converts table data into JSON text.",
      "parameters": {
        "type": "object",
        "properties": {
          "--raw": {
            "type": "switch",
            "description": "remove all of the whitespace"
          },
          "--indent": {
            "type": "number",
            "description": "specify indentation width"
          },
          "--tabs": {
            "type": "number",
            "description": "specify indentation tab quantity"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to md",
      "description": "Convert table into simple Markdown.",
      "parameters": {
        "type": "object",
        "properties": {
          "--pretty": {
            "type": "switch",
            "description": "Formats the Markdown table to vertically align items"
          },
          "--per-element": {
            "type": "switch",
            "description": "treat each row as markdown syntax element"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to msgpack",
      "description": "Convert Nu values into MessagePack.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to msgpackz",
      "description": "Convert Nu values into brotli-compressed MessagePack.",
      "parameters": {
        "type": "object",
        "properties": {
          "--quality": {
            "type": "int",
            "description": "Quality of brotli compression (default 3)"
          },
          "--window-size": {
            "type": "int",
            "description": "Window size for brotli compression (default 20)"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to nuon",
      "description": "Converts table data into Nuon (Nushell Object Notation) text.",
      "parameters": {
        "type": "object",
        "properties": {
          "--raw": {
            "type": "switch",
            "description": "remove all of the whitespace (default behaviour and overwrites -i and -t)"
          },
          "--indent": {
            "type": "number",
            "description": "specify indentation width"
          },
          "--tabs": {
            "type": "number",
            "description": "specify indentation tab quantity"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to png",
      "description": "converts ansi string into png image",
      "parameters": {
        "type": "object",
        "properties": {
          "output-path": {
            "type": "path",
            "description": "output file path (by default uses current timestamp)"
          },
          "--width": {
            "type": "int",
            "description": "output width"
          },
          "--theme": {
            "type": "string",
            "description": "select theme of the output, one of: [\"vscode\", \"xterm\", \"ubuntu\", \"eclipse\", \"mirc\", \"putty\", \"winxp\", \"terminal\", \"win10\", \"win_power-shell\", \"win_ps\"]\n\t\tby default uses `vscode` theme and you can mix this flag with custom theme colors every other colors will be from the selected theme"
          },
          "--font": {
            "type": "string",
            "description": "Select the font from one of [\"SourceCodePro\"], by default the first font in the list will be used"
          },
          "--custom-font-regular": {
            "type": "path",
            "description": "custom font Regular font path"
          },
          "--custom-font-bold": {
            "type": "path",
            "description": "custom font Bold font path"
          },
          "--custom-font-italic": {
            "type": "path",
            "description": "custom font Italic font path"
          },
          "--custom-font-bold_italic": {
            "type": "path",
            "description": "custom font Bold Italic font path"
          },
          "--custom-theme-fg": {
            "type": "int",
            "description": "custom foreground color in hex format (0x040404)"
          },
          "--custom-theme-bg": {
            "type": "int",
            "description": "custom background color in hex format (0x040404)"
          },
          "--custom-theme-black": {
            "type": "int",
            "description": "custom black color in hex format (0x040404)"
          },
          "--custom-theme-red": {
            "type": "int",
            "description": "custom red color in hex format (0x040404)"
          },
          "--custom-theme-green": {
            "type": "int",
            "description": "custom green color in hex format (0x040404)"
          },
          "--custom-theme-yellow": {
            "type": "int",
            "description": "custom yellow color in hex format (0x040404)"
          },
          "--custom-theme-blue": {
            "type": "int",
            "description": "custom blue color in hex format (0x040404)"
          },
          "--custom-theme-magenta": {
            "type": "int",
            "description": "custom magenta color in hex format (0x040404)"
          },
          "--custom-theme-cyan": {
            "type": "int",
            "description": "custom cyan color in hex format (0x040404)"
          },
          "--custom-theme-white": {
            "type": "int",
            "description": "custom white color in hex format (0x040404)"
          },
          "--custom-theme-bright_black": {
            "type": "int",
            "description": "custom bright black color in hex format (0x040404)"
          },
          "--custom-theme-bright_red": {
            "type": "int",
            "description": "custom bright red color in hex format (0x040404)"
          },
          "--custom-theme-bright_green": {
            "type": "int",
            "description": "custom bright green color in hex format (0x040404)"
          },
          "--custom-theme-bright_yellow": {
            "type": "int",
            "description": "custom bright yellow color in hex format (0x040404)"
          },
          "--custom-theme-bright_blue": {
            "type": "int",
            "description": "custom bright blue color in hex format (0x040404)"
          },
          "--custom-theme-bright_magenta": {
            "type": "int",
            "description": "custom bright magenta color in hex format (0x040404)"
          },
          "--custom-theme-bright_cyan": {
            "type": "int",
            "description": "custom bright cyan color in hex format (0x040404)"
          },
          "--custom-theme-bright_white": {
            "type": "int",
            "description": "custom bright white color in hex format (0x040404)"
          },
          "--log-level": {
            "type": "string",
            "description": "sets log level (CRITICAL (c) ERROR (e) WARN (w) INFO (i) DEBUG (d) TRACE (t)) defaults to INFO"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to text",
      "description": "Converts data into simple text.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to toml",
      "description": "Convert record into .toml text.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to tsv",
      "description": "Convert table into .tsv text.",
      "parameters": {
        "type": "object",
        "properties": {
          "--noheaders": {
            "type": "switch",
            "description": "do not output the column names as the first row"
          },
          "--columns": {
            "type": "list<string>",
            "description": "the names (in order) of the columns to use"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to xml",
      "description": "Convert special record structure into .xml text.",
      "parameters": {
        "type": "object",
        "properties": {
          "--indent": {
            "type": "int",
            "description": "Formats the XML text with the provided indentation setting"
          },
          "--partial-escape": {
            "type": "switch",
            "description": "Only escape mandatory characters in text and attributes"
          },
          "--self-closed": {
            "type": "switch",
            "description": "Output empty tags as self closing"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "to yaml",
      "description": "Convert table into .yaml/.yml text.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "touch",
      "description": "Creates one or more files.",
      "parameters": {
        "type": "object",
        "properties": {
          "...files": {
            "type": "one_of(glob, path)",
            "description": "The file(s) to create."
          },
          "--reference": {
            "type": "string",
            "description": "change the file or directory time to the time of the reference file/directory"
          },
          "--modified": {
            "type": "switch",
            "description": "change the modification time of the file or directory. If no reference file/directory is given, the current time is used"
          },
          "--access": {
            "type": "switch",
            "description": "change the access time of the file or directory. If no reference file/directory is given, the current time is used"
          },
          "--no-create": {
            "type": "switch",
            "description": "do not create the file if it does not exist"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "transpose",
      "description": "Transposes the table contents so rows become columns and columns become rows.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "string",
            "description": "The names to give columns once transposed."
          },
          "--header-row": {
            "type": "switch",
            "description": "treat the first row as column names"
          },
          "--ignore-titles": {
            "type": "switch",
            "description": "don't transpose the column names into values"
          },
          "--as-record": {
            "type": "switch",
            "description": "transfer to record if the result is a table and contains only one row"
          },
          "--keep-last": {
            "type": "switch",
            "description": "on repetition of record fields due to `header-row`, keep the last value obtained"
          },
          "--keep-all": {
            "type": "switch",
            "description": "on repetition of record fields due to `header-row`, keep all the values obtained"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "try",
      "description": "Try to run a block, if it fails optionally run a catch closure.",
      "parameters": {
        "type": "object",
        "properties": {
          "try_block": {
            "type": "block",
            "description": "Block to run."
          },
          "catch_closure": {
            "type": "\"catch\" one_of(closure(), closure(any))",
            "description": "Closure to run if try block fails."
          }
        },
        "required": [
          "try_block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "tutor",
      "description": "Run the tutorial. To begin, run: tutor.",
      "parameters": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Item to search for, or 'list' to list available tutorials."
          },
          "--find": {
            "type": "string",
            "description": "Search tutorial for a phrase"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "type_map",
      "description": "",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "uname",
      "description": "Print certain system information using uutils/coreutils uname.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "uniq",
      "description": "Return the distinct values in the input.",
      "parameters": {
        "type": "object",
        "properties": {
          "--count": {
            "type": "switch",
            "description": "Return a table containing the distinct input values together with their counts"
          },
          "--repeated": {
            "type": "switch",
            "description": "Return the input values that occur more than once"
          },
          "--ignore-case": {
            "type": "switch",
            "description": "Compare input values case-insensitively"
          },
          "--unique": {
            "type": "switch",
            "description": "Return the input values that occur once only"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "uniq-by",
      "description": "Return the distinct values in the input by the given column(s).",
      "parameters": {
        "type": "object",
        "properties": {
          "...columns": {
            "type": "any",
            "description": "The column(s) to filter by."
          },
          "--count": {
            "type": "switch",
            "description": "Return a table containing the distinct input values together with their counts"
          },
          "--repeated": {
            "type": "switch",
            "description": "Return the input values that occur more than once"
          },
          "--ignore-case": {
            "type": "switch",
            "description": "Ignore differences in case when comparing input values"
          },
          "--unique": {
            "type": "switch",
            "description": "Return the input values that occur once only"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "update",
      "description": "Update an existing column to have a new value.",
      "parameters": {
        "type": "object",
        "properties": {
          "field": {
            "type": "cell-path",
            "description": "The name of the column to update."
          },
          "replacement value": {
            "type": "any",
            "description": "The new value to give the cell(s), or a closure to create the value."
          }
        },
        "required": [
          "field",
          "replacement value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "update cells",
      "description": "Update the table cells.",
      "parameters": {
        "type": "object",
        "properties": {
          "closure": {
            "type": "closure(any)",
            "description": "the closure to run an update for each cell"
          },
          "--columns": {
            "type": "list<any>",
            "description": "list of columns to update"
          }
        },
        "required": [
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "upsert",
      "description": "Update an existing column to have a new value, or insert a new column.",
      "parameters": {
        "type": "object",
        "properties": {
          "field": {
            "type": "cell-path",
            "description": "The name of the column to update or insert."
          },
          "replacement value": {
            "type": "any",
            "description": "The new value to give the cell(s), or a closure to create the value."
          }
        },
        "required": [
          "field",
          "replacement value"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "url",
      "description": "Various commands for working with URLs.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "url build-query",
      "description": "Converts record or table into query string applying percent-encoding.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "url decode",
      "description": "Converts a percent-encoded web safe string to a string.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, url decode strings at the given cell paths."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "url encode",
      "description": "Converts a string to a percent encoded web safe string.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "For a data structure input, check strings at the given cell paths, and replace with result."
          },
          "--all": {
            "type": "switch",
            "description": "encode all non-alphanumeric chars including `/`, `.`, `:`"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "url join",
      "description": "Converts a record to url.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "url parse",
      "description": "Parses a url.",
      "parameters": {
        "type": "object",
        "properties": {
          "...rest": {
            "type": "cell-path",
            "description": "Optionally operate by cell path."
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "use",
      "description": "Use definitions from a module, making them available in your shell.",
      "parameters": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Module or module file."
          },
          "...members": {
            "type": "any",
            "description": "Which members of the module to import."
          }
        },
        "required": [
          "module"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "values",
      "description": "Given a record or table, produce a list of its columns' values.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "version",
      "description": "Display Nu version, and its build configuration.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "view",
      "description": "Various commands for viewing debug information.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "view files",
      "description": "View the files registered in nushell's EngineState memory.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "view ir",
      "description": "View the compiled IR code for a block of code.",
      "parameters": {
        "type": "object",
        "properties": {
          "target": {
            "type": "any",
            "description": "The name or block to view compiled code for."
          },
          "--json": {
            "type": "switch",
            "description": "Dump the raw block data as JSON (unstable)."
          },
          "--decl-id": {
            "type": "switch",
            "description": "Integer is a declaration ID rather than a block ID."
          }
        },
        "required": [
          "target"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "view source",
      "description": "View a block, module, or a definition.",
      "parameters": {
        "type": "object",
        "properties": {
          "item": {
            "type": "any",
            "description": "Name or block to view."
          }
        },
        "required": [
          "item"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "view span",
      "description": "View the contents of a span.",
      "parameters": {
        "type": "object",
        "properties": {
          "start": {
            "type": "int",
            "description": "Start of the span."
          },
          "end": {
            "type": "int",
            "description": "End of the span."
          }
        },
        "required": [
          "start",
          "end"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "watch",
      "description": "Watch for file changes and execute Nu code when they happen.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "path",
            "description": "The path to watch. Can be a file or directory."
          },
          "closure": {
            "type": "closure(string, string, string)",
            "description": "Some Nu code to run whenever a file changes. The closure will be passed `operation`, `path`, and `new_path` (for renames only) arguments in that order."
          },
          "--debounce-ms": {
            "type": "int",
            "description": "Debounce changes for this many milliseconds (default: 100). Adjust if you find that single writes are reported as multiple events"
          },
          "--glob": {
            "type": "string",
            "description": "Only report changes for files that match this glob pattern (default: all files)"
          },
          "--recursive": {
            "type": "bool",
            "description": "Watch all directories under `<path>` recursively. Will be ignored if `<path>` is a file (default: true)"
          },
          "--quiet": {
            "type": "switch",
            "description": "Hide the initial status message (default: false)"
          },
          "--verbose": {
            "type": "switch",
            "description": "Operate in verbose mode (default: false)"
          }
        },
        "required": [
          "path",
          "closure"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "where",
      "description": "Filter values based on a row condition.",
      "parameters": {
        "type": "object",
        "properties": {
          "row_condition": {
            "type": "condition",
            "description": "Filter condition."
          }
        },
        "required": [
          "row_condition"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "which",
      "description": "Finds a program file, alias or custom command.",
      "parameters": {
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "description": "Application."
          },
          "...rest": {
            "type": "string",
            "description": "Additional applications."
          },
          "--all": {
            "type": "switch",
            "description": "list all executables"
          }
        },
        "required": [
          "application"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "while",
      "description": "Conditionally run a block in a loop.",
      "parameters": {
        "type": "object",
        "properties": {
          "cond": {
            "type": "variable",
            "description": "Condition to check."
          },
          "block": {
            "type": "block",
            "description": "Block to loop if check succeeds."
          }
        },
        "required": [
          "cond",
          "block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "whoami",
      "description": "Get the current username using uutils/coreutils whoami.",
      "parameters": {
        "type": "object",
        "properties": {},
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "window",
      "description": "Creates a sliding window of `window_size` that slide by n rows/elements across input.",
      "parameters": {
        "type": "object",
        "properties": {
          "window_size": {
            "type": "int",
            "description": "The size of each window."
          },
          "--stride": {
            "type": "int",
            "description": "the number of rows to slide over between windows"
          },
          "--remainder": {
            "type": "switch",
            "description": "yield last chunks even if they have fewer elements than size"
          }
        },
        "required": [
          "window_size"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "with-env",
      "description": "Runs a block with an environment variable set.",
      "parameters": {
        "type": "object",
        "properties": {
          "variable": {
            "type": "any",
            "description": "The environment variable to temporarily set."
          },
          "block": {
            "type": "closure()",
            "description": "The block to run once the variable is set."
          }
        },
        "required": [
          "variable",
          "block"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "wrap",
      "description": "Wrap the value into a column.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the column."
          }
        },
        "required": [
          "name"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "zip",
      "description": "Combine a stream with the input.",
      "parameters": {
        "type": "object",
        "properties": {
          "other": {
            "type": "one_of(any, closure())",
            "description": "The other input, or closure returning a stream."
          }
        },
        "required": [
          "other"
        ]
      }
    }
  }
]